// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire_transfers.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wire_transfers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace allspark {
class AuthDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AuthData> {};
AuthDataDefaultTypeInternal _AuthData_default_instance_;
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {};
MessageDefaultTypeInternal _Message_default_instance_;
class InboxMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InboxMessage> {};
InboxMessageDefaultTypeInternal _InboxMessage_default_instance_;
class ConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigRequest> {};
ConfigRequestDefaultTypeInternal _ConfigRequest_default_instance_;
class ConfigResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigResponse> {};
ConfigResponseDefaultTypeInternal _ConfigResponse_default_instance_;
class NodeDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeData> {};
NodeDataDefaultTypeInternal _NodeData_default_instance_;
class SessionNodeDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionNodeData> {};
SessionNodeDataDefaultTypeInternal _SessionNodeData_default_instance_;
class SessionDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionData> {};
SessionDataDefaultTypeInternal _SessionData_default_instance_;
class SessionsListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionsList> {};
SessionsListDefaultTypeInternal _SessionsList_default_instance_;
class NodesListDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodesListData> {};
NodesListDataDefaultTypeInternal _NodesListData_default_instance_;
class CreateSessionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateSessionRequest> {};
CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
class JoinSessionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinSessionRequest> {};
JoinSessionRequestDefaultTypeInternal _JoinSessionRequest_default_instance_;
class GetInboxMessagesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInboxMessagesRequest> {};
GetInboxMessagesRequestDefaultTypeInternal _GetInboxMessagesRequest_default_instance_;
class InboxMessagesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InboxMessagesResponse> {};
InboxMessagesResponseDefaultTypeInternal _InboxMessagesResponse_default_instance_;
class BooleanDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BooleanData> {};
BooleanDataDefaultTypeInternal _BooleanData_default_instance_;
class StringDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StringData> {};
StringDataDefaultTypeInternal _StringData_default_instance_;
class EmptyDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmptyData> {};
EmptyDataDefaultTypeInternal _EmptyData_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[17];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthData, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthData, client_type_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, dest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, dest_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, payload1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, payload2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, is_ack_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, is_anonymize_src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, anonymize_src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, raw_data_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessage, node_id_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessage, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessage, timestamp_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, update_gcm_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, fetch_inbox_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, fetch_inbox_messages_from_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, fetch_inbox_messages_to_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, fetch_inbox_messages_from_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRequest, fetch_inbox_messages_to_timestamp_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigResponse, from_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigResponse, to_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigResponse, more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigResponse, user_time_stamp_diff_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, host_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, is_ssl_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionNodeData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionNodeData, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionNodeData, is_anonymous_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, session_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionData, allow_anonymous_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsList, sessions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsList, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionsList, count_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesListData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodesListData, node_id_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, is_anonymous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, who_can_add_session_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, notify_only_last_few_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, session_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, session_game_master_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, session_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSessionRequest, allow_anonymous_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, is_anonymous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSessionRequest, node_id_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, from_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, to_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, from_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInboxMessagesRequest, to_timestamp_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessagesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessagesResponse, inbox_messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessagesResponse, from_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessagesResponse, to_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InboxMessagesResponse, more_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanData, value_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringData, value_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AuthData)},
  { 6, -1, sizeof(Message)},
  { 23, -1, sizeof(InboxMessage)},
  { 32, -1, sizeof(ConfigRequest)},
  { 43, -1, sizeof(ConfigResponse)},
  { 52, -1, sizeof(NodeData)},
  { 59, -1, sizeof(SessionNodeData)},
  { 65, -1, sizeof(SessionData)},
  { 74, -1, sizeof(SessionsList)},
  { 81, -1, sizeof(NodesListData)},
  { 86, -1, sizeof(CreateSessionRequest)},
  { 97, -1, sizeof(JoinSessionRequest)},
  { 104, -1, sizeof(GetInboxMessagesRequest)},
  { 114, -1, sizeof(InboxMessagesResponse)},
  { 122, -1, sizeof(BooleanData)},
  { 127, -1, sizeof(StringData)},
  { 132, -1, sizeof(EmptyData)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_AuthData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_InboxMessage_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NodeData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionNodeData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SessionsList_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_NodesListData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSessionRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_JoinSessionRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_GetInboxMessagesRequest_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_InboxMessagesResponse_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_BooleanData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_StringData_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_EmptyData_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_wire_5ftransfers_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "wire_transfers.proto", schemas, file_default_instances, protobuf_Offsets_wire_5ftransfers_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void protobuf_ShutdownFile_wire_5ftransfers_2eproto() {
  _AuthData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _InboxMessage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConfigRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ConfigResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NodeData_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SessionNodeData_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SessionData_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SessionsList_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _NodesListData_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CreateSessionRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _JoinSessionRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GetInboxMessagesRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _InboxMessagesResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _BooleanData_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _StringData_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _EmptyData_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void protobuf_InitDefaults_wire_5ftransfers_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AuthData_default_instance_.DefaultConstruct();
  _Message_default_instance_.DefaultConstruct();
  _InboxMessage_default_instance_.DefaultConstruct();
  _ConfigRequest_default_instance_.DefaultConstruct();
  _ConfigResponse_default_instance_.DefaultConstruct();
  _NodeData_default_instance_.DefaultConstruct();
  _SessionNodeData_default_instance_.DefaultConstruct();
  _SessionData_default_instance_.DefaultConstruct();
  _SessionsList_default_instance_.DefaultConstruct();
  _NodesListData_default_instance_.DefaultConstruct();
  _CreateSessionRequest_default_instance_.DefaultConstruct();
  _JoinSessionRequest_default_instance_.DefaultConstruct();
  _GetInboxMessagesRequest_default_instance_.DefaultConstruct();
  _InboxMessagesResponse_default_instance_.DefaultConstruct();
  _BooleanData_default_instance_.DefaultConstruct();
  _StringData_default_instance_.DefaultConstruct();
  _EmptyData_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_wire_5ftransfers_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_wire_5ftransfers_2eproto_impl);
}
void protobuf_AddDesc_wire_5ftransfers_2eproto_impl() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  static const char descriptor[] = {
      "\n\024wire_transfers.proto\022\010allspark\"0\n\010Auth"
      "Data\022\017\n\007node_id\030\001 \001(\t\022\023\n\013client_type\030\002 \001"
      "(\005\"\207\002\n\007Message\022\017\n\007dest_id\030\001 \001(\t\022\016\n\006src_i"
      "d\030\002 \001(\t\022\027\n\017dest_session_id\030\003 \001(\t\022\014\n\004type"
      "\030\004 \001(\005\022\017\n\007payload\030\005 \001(\014\022\020\n\010payload1\030\006 \001("
      "\014\022\020\n\010payload2\030\007 \001(\014\022\n\n\002id\030\010 \001(\t\022\027\n\017is_ac"
      "k_required\030\t \001(\010\022\033\n\023is_anonymize_src_id\030"
      "\n \001(\010\022\030\n\020anonymize_src_id\030\013 \001(\t\022\021\n\ttimes"
      "tamp\030\014 \001(\003\022\020\n\010raw_data\030\r \001(\014\"n\n\014InboxMes"
      "sage\022\023\n\013node_id_seq\030\001 \001(\t\022\017\n\007from_id\030\002 \001"
      "(\t\022\024\n\014message_type\030\003 \001(\005\022\017\n\007payload\030\004 \001("
      "\t\022\021\n\ttimestamp\030\005 \001(\003\"\374\001\n\rConfigRequest\022\026"
      "\n\016update_gcm_key\030\001 \001(\t\022\034\n\024fetch_inbox_me"
      "ssages\030\002 \001(\010\022\021\n\ttimestamp\030\003 \001(\003\022%\n\035fetch"
      "_inbox_messages_from_seq\030\004 \001(\003\022#\n\033fetch_"
      "inbox_messages_to_seq\030\005 \001(\003\022+\n#fetch_inb"
      "ox_messages_from_timestamp\030\006 \001(\003\022)\n!fetc"
      "h_inbox_messages_to_timestamp\030\007 \001(\003\"\210\001\n\016"
      "ConfigResponse\022(\n\010messages\030\001 \003(\0132\026.allsp"
      "ark.InboxMessage\022\020\n\010from_seq\030\002 \001(\003\022\016\n\006to"
      "_seq\030\003 \001(\003\022\014\n\004more\030\004 \001(\010\022\034\n\024user_time_st"
      "amp_diff\030\005 \001(\003\">\n\010NodeData\022\024\n\014host_addre"
      "ss\030\001 \001(\t\022\014\n\004port\030\002 \001(\t\022\016\n\006is_ssl\030\003 \001(\010\"8"
      "\n\017SessionNodeData\022\017\n\007node_id\030\001 \001(\t\022\024\n\014is"
      "_anonymous\030\002 \001(\010\"\222\001\n\013SessionData\022\022\n\nsess"
      "ion_id\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\017\n\007nod"
      "e_id\030\003 \001(\t\0220\n\rsession_nodes\030\004 \003(\0132\031.alls"
      "park.SessionNodeData\022\027\n\017allow_anonymous\030"
      "\005 \001(\010\"T\n\014SessionsList\022\'\n\010sessions\030\001 \003(\0132"
      "\025.allspark.SessionData\022\014\n\004from\030\002 \001(\005\022\r\n\005"
      "count\030\003 \001(\005\" \n\rNodesListData\022\017\n\007node_id\030"
      "\001 \003(\t\"\344\001\n\024CreateSessionRequest\022\024\n\014is_ano"
      "nymous\030\001 \001(\010\022!\n\031who_can_add_session_node"
      "s\030\002 \001(\005\022\"\n\032notify_only_last_few_users\030\003 "
      "\001(\005\022\024\n\014session_type\030\004 \001(\005\022#\n\033session_gam"
      "e_master_node_id\030\005 \001(\t\022\033\n\023session_descri"
      "ption\030\006 \001(\t\022\027\n\017allow_anonymous\030\007 \001(\010\"O\n\022"
      "JoinSessionRequest\022\024\n\014is_anonymous\030\001 \001(\010"
      "\022\022\n\nsession_id\030\002 \001(\t\022\017\n\007node_id\030\003 \001(\t\"\216\001"
      "\n\027GetInboxMessagesRequest\022\022\n\nsession_id\030"
      "\001 \001(\t\022\017\n\007node_id\030\006 \001(\t\022\020\n\010from_seq\030\002 \001(\005"
      "\022\016\n\006to_seq\030\003 \001(\005\022\026\n\016from_timestamp\030\004 \001(\003"
      "\022\024\n\014to_timestamp\030\005 \001(\003\"w\n\025InboxMessagesR"
      "esponse\022.\n\016inbox_messages\030\001 \003(\0132\026.allspa"
      "rk.InboxMessage\022\020\n\010from_seq\030\002 \001(\003\022\016\n\006to_"
      "seq\030\003 \001(\003\022\014\n\004more\030\004 \001(\010\"\034\n\013BooleanData\022\r"
      "\n\005value\030\001 \001(\010\"\033\n\nStringData\022\r\n\005value\030\001 \001"
      "(\t\"\013\n\tEmptyDataB\003\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wire_transfers.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wire_5ftransfers_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_wire_5ftransfers_2eproto_once_);
void protobuf_AddDesc_wire_5ftransfers_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_wire_5ftransfers_2eproto_once_,
                 &protobuf_AddDesc_wire_5ftransfers_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wire_5ftransfers_2eproto {
  StaticDescriptorInitializer_wire_5ftransfers_2eproto() {
    protobuf_AddDesc_wire_5ftransfers_2eproto();
  }
} static_descriptor_initializer_wire_5ftransfers_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthData::kNodeIdFieldNumber;
const int AuthData::kClientTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthData::AuthData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.AuthData)
}
AuthData::AuthData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.AuthData)
}
AuthData::AuthData(const AuthData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id(),
      GetArenaNoVirtual());
  }
  client_type_ = from.client_type_;
  // @@protoc_insertion_point(copy_constructor:allspark.AuthData)
}

void AuthData::SharedCtor() {
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_type_ = 0;
  _cached_size_ = 0;
}

AuthData::~AuthData() {
  // @@protoc_insertion_point(destructor:allspark.AuthData)
  SharedDtor();
}

void AuthData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  node_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AuthData::ArenaDtor(void* object) {
  AuthData* _this = reinterpret_cast< AuthData* >(object);
  (void)_this;
}
void AuthData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AuthData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const AuthData& AuthData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

AuthData* AuthData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AuthData>(arena);
}

void AuthData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.AuthData)
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_type_ = 0;
}

bool AuthData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.AuthData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.AuthData.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 client_type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.AuthData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.AuthData)
  return false;
#undef DO_
}

void AuthData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.AuthData)
  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.AuthData.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // int32 client_type = 2;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.AuthData)
}

::google::protobuf::uint8* AuthData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.AuthData)
  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.AuthData.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // int32 client_type = 2;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.AuthData)
  return target;
}

size_t AuthData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.AuthData)
  size_t total_size = 0;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // int32 client_type = 2;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.AuthData)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.AuthData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.AuthData)
    MergeFrom(*source);
  }
}

void AuthData::MergeFrom(const AuthData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.AuthData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.node_id().size() > 0) {
    set_node_id(from.node_id());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void AuthData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.AuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthData::CopyFrom(const AuthData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.AuthData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthData::IsInitialized() const {
  return true;
}

void AuthData::Swap(AuthData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AuthData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AuthData::UnsafeArenaSwap(AuthData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AuthData::InternalSwap(AuthData* other) {
  node_id_.Swap(&other->node_id_);
  std::swap(client_type_, other->client_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AuthData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthData

// string node_id = 1;
void AuthData::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AuthData::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.AuthData.node_id)
  return node_id_.Get();
}
void AuthData::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.AuthData.node_id)
}
void AuthData::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.AuthData.node_id)
}
void AuthData::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.AuthData.node_id)
}
::std::string* AuthData::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.AuthData.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthData::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.AuthData.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AuthData::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.AuthData.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AuthData::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.AuthData.node_id)
}
void AuthData::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.AuthData.node_id)
}

// int32 client_type = 2;
void AuthData::clear_client_type() {
  client_type_ = 0;
}
::google::protobuf::int32 AuthData::client_type() const {
  // @@protoc_insertion_point(field_get:allspark.AuthData.client_type)
  return client_type_;
}
void AuthData::set_client_type(::google::protobuf::int32 value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:allspark.AuthData.client_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kDestIdFieldNumber;
const int Message::kSrcIdFieldNumber;
const int Message::kDestSessionIdFieldNumber;
const int Message::kTypeFieldNumber;
const int Message::kPayloadFieldNumber;
const int Message::kPayload1FieldNumber;
const int Message::kPayload2FieldNumber;
const int Message::kIdFieldNumber;
const int Message::kIsAckRequiredFieldNumber;
const int Message::kIsAnonymizeSrcIdFieldNumber;
const int Message::kAnonymizeSrcIdFieldNumber;
const int Message::kTimestampFieldNumber;
const int Message::kRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.Message)
}
Message::Message(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_id().size() > 0) {
    dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_id(),
      GetArenaNoVirtual());
  }
  src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src_id().size() > 0) {
    src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_id(),
      GetArenaNoVirtual());
  }
  dest_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dest_session_id().size() > 0) {
    dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_session_id(),
      GetArenaNoVirtual());
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload(),
      GetArenaNoVirtual());
  }
  payload1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload1().size() > 0) {
    payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload1(),
      GetArenaNoVirtual());
  }
  payload2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload2().size() > 0) {
    payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload2(),
      GetArenaNoVirtual());
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  anonymize_src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.anonymize_src_id().size() > 0) {
    anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.anonymize_src_id(),
      GetArenaNoVirtual());
  }
  raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw_data().size() > 0) {
    raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&type_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:allspark.Message)
}

void Message::SharedCtor() {
  dest_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  anonymize_src_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&type_) + sizeof(timestamp_));
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:allspark.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  dest_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  src_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  dest_session_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  payload_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  payload1_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  payload2_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  anonymize_src_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  raw_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const Message& Message::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Message>(arena);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.Message)
  dest_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  src_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dest_session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  payload1_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  payload2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  anonymize_src_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  raw_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&type_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&type_) + sizeof(timestamp_));
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dest_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_id().data(), this->dest_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.Message.dest_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string src_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_id().data(), this->src_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.Message.src_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dest_session_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest_session_id().data(), this->dest_session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.Message.dest_session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload1 = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload2 = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.Message.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ack_required = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ack_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_anonymize_src_id = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anonymize_src_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string anonymize_src_id = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anonymize_src_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->anonymize_src_id().data(), this->anonymize_src_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.Message.anonymize_src_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_data = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.Message)
  // string dest_id = 1;
  if (this->dest_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_id().data(), this->dest_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.dest_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dest_id(), output);
  }

  // string src_id = 2;
  if (this->src_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_id().data(), this->src_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.src_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->src_id(), output);
  }

  // string dest_session_id = 3;
  if (this->dest_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_session_id().data(), this->dest_session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.dest_session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dest_session_id(), output);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->payload(), output);
  }

  // bytes payload1 = 6;
  if (this->payload1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->payload1(), output);
  }

  // bytes payload2 = 7;
  if (this->payload2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->payload2(), output);
  }

  // string id = 8;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->id(), output);
  }

  // bool is_ack_required = 9;
  if (this->is_ack_required() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_ack_required(), output);
  }

  // bool is_anonymize_src_id = 10;
  if (this->is_anonymize_src_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_anonymize_src_id(), output);
  }

  // string anonymize_src_id = 11;
  if (this->anonymize_src_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anonymize_src_id().data(), this->anonymize_src_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.anonymize_src_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->anonymize_src_id(), output);
  }

  // int64 timestamp = 12;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->timestamp(), output);
  }

  // bytes raw_data = 13;
  if (this->raw_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->raw_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.Message)
  // string dest_id = 1;
  if (this->dest_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_id().data(), this->dest_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.dest_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dest_id(), target);
  }

  // string src_id = 2;
  if (this->src_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_id().data(), this->src_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.src_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src_id(), target);
  }

  // string dest_session_id = 3;
  if (this->dest_session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest_session_id().data(), this->dest_session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.dest_session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dest_session_id(), target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }

  // bytes payload1 = 6;
  if (this->payload1().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->payload1(), target);
  }

  // bytes payload2 = 7;
  if (this->payload2().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->payload2(), target);
  }

  // string id = 8;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->id(), target);
  }

  // bool is_ack_required = 9;
  if (this->is_ack_required() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_ack_required(), target);
  }

  // bool is_anonymize_src_id = 10;
  if (this->is_anonymize_src_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_anonymize_src_id(), target);
  }

  // string anonymize_src_id = 11;
  if (this->anonymize_src_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anonymize_src_id().data(), this->anonymize_src_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.Message.anonymize_src_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->anonymize_src_id(), target);
  }

  // int64 timestamp = 12;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->timestamp(), target);
  }

  // bytes raw_data = 13;
  if (this->raw_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->raw_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.Message)
  size_t total_size = 0;

  // string dest_id = 1;
  if (this->dest_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_id());
  }

  // string src_id = 2;
  if (this->src_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_id());
  }

  // string dest_session_id = 3;
  if (this->dest_session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest_session_id());
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // bytes payload1 = 6;
  if (this->payload1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload1());
  }

  // bytes payload2 = 7;
  if (this->payload2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload2());
  }

  // string id = 8;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string anonymize_src_id = 11;
  if (this->anonymize_src_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->anonymize_src_id());
  }

  // bytes raw_data = 13;
  if (this->raw_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw_data());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // bool is_ack_required = 9;
  if (this->is_ack_required() != 0) {
    total_size += 1 + 1;
  }

  // bool is_anonymize_src_id = 10;
  if (this->is_anonymize_src_id() != 0) {
    total_size += 1 + 1;
  }

  // int64 timestamp = 12;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dest_id().size() > 0) {
    set_dest_id(from.dest_id());
  }
  if (from.src_id().size() > 0) {
    set_src_id(from.src_id());
  }
  if (from.dest_session_id().size() > 0) {
    set_dest_session_id(from.dest_session_id());
  }
  if (from.payload().size() > 0) {
    set_payload(from.payload());
  }
  if (from.payload1().size() > 0) {
    set_payload1(from.payload1());
  }
  if (from.payload2().size() > 0) {
    set_payload2(from.payload2());
  }
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.anonymize_src_id().size() > 0) {
    set_anonymize_src_id(from.anonymize_src_id());
  }
  if (from.raw_data().size() > 0) {
    set_raw_data(from.raw_data());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_ack_required() != 0) {
    set_is_ack_required(from.is_ack_required());
  }
  if (from.is_anonymize_src_id() != 0) {
    set_is_anonymize_src_id(from.is_anonymize_src_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Message* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Message::UnsafeArenaSwap(Message* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  dest_id_.Swap(&other->dest_id_);
  src_id_.Swap(&other->src_id_);
  dest_session_id_.Swap(&other->dest_session_id_);
  payload_.Swap(&other->payload_);
  payload1_.Swap(&other->payload1_);
  payload2_.Swap(&other->payload2_);
  id_.Swap(&other->id_);
  anonymize_src_id_.Swap(&other->anonymize_src_id_);
  raw_data_.Swap(&other->raw_data_);
  std::swap(type_, other->type_);
  std::swap(is_ack_required_, other->is_ack_required_);
  std::swap(is_anonymize_src_id_, other->is_anonymize_src_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// string dest_id = 1;
void Message::clear_dest_id() {
  dest_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::dest_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.dest_id)
  return dest_id_.Get();
}
void Message::set_dest_id(const ::std::string& value) {
  
  dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.dest_id)
}
void Message::set_dest_id(const char* value) {
  
  dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.dest_id)
}
void Message::set_dest_id(const char* value,
    size_t size) {
  
  dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.dest_id)
}
::std::string* Message::mutable_dest_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.dest_id)
  return dest_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_dest_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.dest_id)
  
  return dest_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_dest_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.dest_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dest_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_dest_id(::std::string* dest_id) {
  if (dest_id != NULL) {
    
  } else {
    
  }
  dest_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.dest_id)
}
void Message::unsafe_arena_set_allocated_dest_id(
    ::std::string* dest_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dest_id != NULL) {
    
  } else {
    
  }
  dest_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dest_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.dest_id)
}

// string src_id = 2;
void Message::clear_src_id() {
  src_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::src_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.src_id)
  return src_id_.Get();
}
void Message::set_src_id(const ::std::string& value) {
  
  src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.src_id)
}
void Message::set_src_id(const char* value) {
  
  src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.src_id)
}
void Message::set_src_id(const char* value,
    size_t size) {
  
  src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.src_id)
}
::std::string* Message::mutable_src_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.src_id)
  return src_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_src_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.src_id)
  
  return src_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_src_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.src_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return src_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    
  } else {
    
  }
  src_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.src_id)
}
void Message::unsafe_arena_set_allocated_src_id(
    ::std::string* src_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (src_id != NULL) {
    
  } else {
    
  }
  src_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      src_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.src_id)
}

// string dest_session_id = 3;
void Message::clear_dest_session_id() {
  dest_session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::dest_session_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.dest_session_id)
  return dest_session_id_.Get();
}
void Message::set_dest_session_id(const ::std::string& value) {
  
  dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.dest_session_id)
}
void Message::set_dest_session_id(const char* value) {
  
  dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.dest_session_id)
}
void Message::set_dest_session_id(const char* value,
    size_t size) {
  
  dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.dest_session_id)
}
::std::string* Message::mutable_dest_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.dest_session_id)
  return dest_session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_dest_session_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.dest_session_id)
  
  return dest_session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_dest_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.dest_session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dest_session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_dest_session_id(::std::string* dest_session_id) {
  if (dest_session_id != NULL) {
    
  } else {
    
  }
  dest_session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.dest_session_id)
}
void Message::unsafe_arena_set_allocated_dest_session_id(
    ::std::string* dest_session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dest_session_id != NULL) {
    
  } else {
    
  }
  dest_session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dest_session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.dest_session_id)
}

// int32 type = 4;
void Message::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Message::type() const {
  // @@protoc_insertion_point(field_get:allspark.Message.type)
  return type_;
}
void Message::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.type)
}

// bytes payload = 5;
void Message::clear_payload() {
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:allspark.Message.payload)
  return payload_.Get();
}
void Message::set_payload(const ::std::string& value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.payload)
}
void Message::set_payload(const char* value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.payload)
}
void Message::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.payload)
}
::std::string* Message::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.payload)
  return payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_payload() {
  // @@protoc_insertion_point(field_release:allspark.Message.payload)
  
  return payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.payload)
}
void Message::unsafe_arena_set_allocated_payload(
    ::std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.payload)
}

// bytes payload1 = 6;
void Message::clear_payload1() {
  payload1_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::payload1() const {
  // @@protoc_insertion_point(field_get:allspark.Message.payload1)
  return payload1_.Get();
}
void Message::set_payload1(const ::std::string& value) {
  
  payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.payload1)
}
void Message::set_payload1(const char* value) {
  
  payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.payload1)
}
void Message::set_payload1(const void* value,
    size_t size) {
  
  payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.payload1)
}
::std::string* Message::mutable_payload1() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.payload1)
  return payload1_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_payload1() {
  // @@protoc_insertion_point(field_release:allspark.Message.payload1)
  
  return payload1_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_payload1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.payload1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload1_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_payload1(::std::string* payload1) {
  if (payload1 != NULL) {
    
  } else {
    
  }
  payload1_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.payload1)
}
void Message::unsafe_arena_set_allocated_payload1(
    ::std::string* payload1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload1 != NULL) {
    
  } else {
    
  }
  payload1_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.payload1)
}

// bytes payload2 = 7;
void Message::clear_payload2() {
  payload2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::payload2() const {
  // @@protoc_insertion_point(field_get:allspark.Message.payload2)
  return payload2_.Get();
}
void Message::set_payload2(const ::std::string& value) {
  
  payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.payload2)
}
void Message::set_payload2(const char* value) {
  
  payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.payload2)
}
void Message::set_payload2(const void* value,
    size_t size) {
  
  payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.payload2)
}
::std::string* Message::mutable_payload2() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.payload2)
  return payload2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_payload2() {
  // @@protoc_insertion_point(field_release:allspark.Message.payload2)
  
  return payload2_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_payload2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.payload2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_payload2(::std::string* payload2) {
  if (payload2 != NULL) {
    
  } else {
    
  }
  payload2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.payload2)
}
void Message::unsafe_arena_set_allocated_payload2(
    ::std::string* payload2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload2 != NULL) {
    
  } else {
    
  }
  payload2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.payload2)
}

// string id = 8;
void Message::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.id)
  return id_.Get();
}
void Message::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.id)
}
void Message::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.id)
}
void Message::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.id)
}
::std::string* Message::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.id)
}
void Message::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.id)
}

// bool is_ack_required = 9;
void Message::clear_is_ack_required() {
  is_ack_required_ = false;
}
bool Message::is_ack_required() const {
  // @@protoc_insertion_point(field_get:allspark.Message.is_ack_required)
  return is_ack_required_;
}
void Message::set_is_ack_required(bool value) {
  
  is_ack_required_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.is_ack_required)
}

// bool is_anonymize_src_id = 10;
void Message::clear_is_anonymize_src_id() {
  is_anonymize_src_id_ = false;
}
bool Message::is_anonymize_src_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.is_anonymize_src_id)
  return is_anonymize_src_id_;
}
void Message::set_is_anonymize_src_id(bool value) {
  
  is_anonymize_src_id_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.is_anonymize_src_id)
}

// string anonymize_src_id = 11;
void Message::clear_anonymize_src_id() {
  anonymize_src_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::anonymize_src_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.anonymize_src_id)
  return anonymize_src_id_.Get();
}
void Message::set_anonymize_src_id(const ::std::string& value) {
  
  anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.anonymize_src_id)
}
void Message::set_anonymize_src_id(const char* value) {
  
  anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.anonymize_src_id)
}
void Message::set_anonymize_src_id(const char* value,
    size_t size) {
  
  anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.anonymize_src_id)
}
::std::string* Message::mutable_anonymize_src_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.anonymize_src_id)
  return anonymize_src_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_anonymize_src_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.anonymize_src_id)
  
  return anonymize_src_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_anonymize_src_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.anonymize_src_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return anonymize_src_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_anonymize_src_id(::std::string* anonymize_src_id) {
  if (anonymize_src_id != NULL) {
    
  } else {
    
  }
  anonymize_src_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anonymize_src_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.anonymize_src_id)
}
void Message::unsafe_arena_set_allocated_anonymize_src_id(
    ::std::string* anonymize_src_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (anonymize_src_id != NULL) {
    
  } else {
    
  }
  anonymize_src_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      anonymize_src_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.anonymize_src_id)
}

// int64 timestamp = 12;
void Message::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Message::timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.Message.timestamp)
  return timestamp_;
}
void Message::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.timestamp)
}

// bytes raw_data = 13;
void Message::clear_raw_data() {
  raw_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Message::raw_data() const {
  // @@protoc_insertion_point(field_get:allspark.Message.raw_data)
  return raw_data_.Get();
}
void Message::set_raw_data(const ::std::string& value) {
  
  raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.raw_data)
}
void Message::set_raw_data(const char* value) {
  
  raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.raw_data)
}
void Message::set_raw_data(const void* value,
    size_t size) {
  
  raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.raw_data)
}
::std::string* Message::mutable_raw_data() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.raw_data)
  return raw_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::release_raw_data() {
  // @@protoc_insertion_point(field_release:allspark.Message.raw_data)
  
  return raw_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Message::unsafe_arena_release_raw_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.raw_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return raw_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Message::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.raw_data)
}
void Message::unsafe_arena_set_allocated_raw_data(
    ::std::string* raw_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      raw_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.raw_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InboxMessage::kNodeIdSeqFieldNumber;
const int InboxMessage::kFromIdFieldNumber;
const int InboxMessage::kMessageTypeFieldNumber;
const int InboxMessage::kPayloadFieldNumber;
const int InboxMessage::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InboxMessage::InboxMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.InboxMessage)
}
InboxMessage::InboxMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.InboxMessage)
}
InboxMessage::InboxMessage(const InboxMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id_seq().size() > 0) {
    node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id_seq(),
      GetArenaNoVirtual());
  }
  from_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_id().size() > 0) {
    from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_id(),
      GetArenaNoVirtual());
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload(),
      GetArenaNoVirtual());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:allspark.InboxMessage)
}

void InboxMessage::SharedCtor() {
  node_id_seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(message_type_));
  _cached_size_ = 0;
}

InboxMessage::~InboxMessage() {
  // @@protoc_insertion_point(destructor:allspark.InboxMessage)
  SharedDtor();
}

void InboxMessage::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  node_id_seq_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  from_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  payload_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void InboxMessage::ArenaDtor(void* object) {
  InboxMessage* _this = reinterpret_cast< InboxMessage* >(object);
  (void)_this;
}
void InboxMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InboxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InboxMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const InboxMessage& InboxMessage::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

InboxMessage* InboxMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<InboxMessage>(arena);
}

void InboxMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.InboxMessage)
  node_id_seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  from_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(message_type_));
}

bool InboxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.InboxMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id_seq = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id_seq().data(), this->node_id_seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.InboxMessage.node_id_seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_id().data(), this->from_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.InboxMessage.from_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 message_type = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.InboxMessage.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.InboxMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.InboxMessage)
  return false;
#undef DO_
}

void InboxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.InboxMessage)
  // string node_id_seq = 1;
  if (this->node_id_seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id_seq().data(), this->node_id_seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.InboxMessage.node_id_seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id_seq(), output);
  }

  // string from_id = 2;
  if (this->from_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_id().data(), this->from_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.InboxMessage.from_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_id(), output);
  }

  // int32 message_type = 3;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_type(), output);
  }

  // string payload = 4;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.InboxMessage.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->payload(), output);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.InboxMessage)
}

::google::protobuf::uint8* InboxMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.InboxMessage)
  // string node_id_seq = 1;
  if (this->node_id_seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id_seq().data(), this->node_id_seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.InboxMessage.node_id_seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id_seq(), target);
  }

  // string from_id = 2;
  if (this->from_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_id().data(), this->from_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.InboxMessage.from_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_id(), target);
  }

  // int32 message_type = 3;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_type(), target);
  }

  // string payload = 4;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.InboxMessage.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->payload(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.InboxMessage)
  return target;
}

size_t InboxMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.InboxMessage)
  size_t total_size = 0;

  // string node_id_seq = 1;
  if (this->node_id_seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id_seq());
  }

  // string from_id = 2;
  if (this->from_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_id());
  }

  // string payload = 4;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 message_type = 3;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InboxMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.InboxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InboxMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InboxMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.InboxMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.InboxMessage)
    MergeFrom(*source);
  }
}

void InboxMessage::MergeFrom(const InboxMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.InboxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.node_id_seq().size() > 0) {
    set_node_id_seq(from.node_id_seq());
  }
  if (from.from_id().size() > 0) {
    set_from_id(from.from_id());
  }
  if (from.payload().size() > 0) {
    set_payload(from.payload());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
}

void InboxMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.InboxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboxMessage::CopyFrom(const InboxMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.InboxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboxMessage::IsInitialized() const {
  return true;
}

void InboxMessage::Swap(InboxMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InboxMessage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InboxMessage::UnsafeArenaSwap(InboxMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InboxMessage::InternalSwap(InboxMessage* other) {
  node_id_seq_.Swap(&other->node_id_seq_);
  from_id_.Swap(&other->from_id_);
  payload_.Swap(&other->payload_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(message_type_, other->message_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InboxMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InboxMessage

// string node_id_seq = 1;
void InboxMessage::clear_node_id_seq() {
  node_id_seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& InboxMessage::node_id_seq() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.node_id_seq)
  return node_id_seq_.Get();
}
void InboxMessage::set_node_id_seq(const ::std::string& value) {
  
  node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.node_id_seq)
}
void InboxMessage::set_node_id_seq(const char* value) {
  
  node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.InboxMessage.node_id_seq)
}
void InboxMessage::set_node_id_seq(const char* value,
    size_t size) {
  
  node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.InboxMessage.node_id_seq)
}
::std::string* InboxMessage::mutable_node_id_seq() {
  
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessage.node_id_seq)
  return node_id_seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InboxMessage::release_node_id_seq() {
  // @@protoc_insertion_point(field_release:allspark.InboxMessage.node_id_seq)
  
  return node_id_seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InboxMessage::unsafe_arena_release_node_id_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.InboxMessage.node_id_seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void InboxMessage::set_allocated_node_id_seq(::std::string* node_id_seq) {
  if (node_id_seq != NULL) {
    
  } else {
    
  }
  node_id_seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id_seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.InboxMessage.node_id_seq)
}
void InboxMessage::unsafe_arena_set_allocated_node_id_seq(
    ::std::string* node_id_seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id_seq != NULL) {
    
  } else {
    
  }
  node_id_seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id_seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.InboxMessage.node_id_seq)
}

// string from_id = 2;
void InboxMessage::clear_from_id() {
  from_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& InboxMessage::from_id() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.from_id)
  return from_id_.Get();
}
void InboxMessage::set_from_id(const ::std::string& value) {
  
  from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.from_id)
}
void InboxMessage::set_from_id(const char* value) {
  
  from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.InboxMessage.from_id)
}
void InboxMessage::set_from_id(const char* value,
    size_t size) {
  
  from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.InboxMessage.from_id)
}
::std::string* InboxMessage::mutable_from_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessage.from_id)
  return from_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InboxMessage::release_from_id() {
  // @@protoc_insertion_point(field_release:allspark.InboxMessage.from_id)
  
  return from_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InboxMessage::unsafe_arena_release_from_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.InboxMessage.from_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return from_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void InboxMessage::set_allocated_from_id(::std::string* from_id) {
  if (from_id != NULL) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.InboxMessage.from_id)
}
void InboxMessage::unsafe_arena_set_allocated_from_id(
    ::std::string* from_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (from_id != NULL) {
    
  } else {
    
  }
  from_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      from_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.InboxMessage.from_id)
}

// int32 message_type = 3;
void InboxMessage::clear_message_type() {
  message_type_ = 0;
}
::google::protobuf::int32 InboxMessage::message_type() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.message_type)
  return message_type_;
}
void InboxMessage::set_message_type(::google::protobuf::int32 value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.message_type)
}

// string payload = 4;
void InboxMessage::clear_payload() {
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& InboxMessage::payload() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.payload)
  return payload_.Get();
}
void InboxMessage::set_payload(const ::std::string& value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.payload)
}
void InboxMessage::set_payload(const char* value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.InboxMessage.payload)
}
void InboxMessage::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.InboxMessage.payload)
}
::std::string* InboxMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessage.payload)
  return payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InboxMessage::release_payload() {
  // @@protoc_insertion_point(field_release:allspark.InboxMessage.payload)
  
  return payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* InboxMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.InboxMessage.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void InboxMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.InboxMessage.payload)
}
void InboxMessage::unsafe_arena_set_allocated_payload(
    ::std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.InboxMessage.payload)
}

// int64 timestamp = 5;
void InboxMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InboxMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.timestamp)
  return timestamp_;
}
void InboxMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigRequest::kUpdateGcmKeyFieldNumber;
const int ConfigRequest::kFetchInboxMessagesFieldNumber;
const int ConfigRequest::kTimestampFieldNumber;
const int ConfigRequest::kFetchInboxMessagesFromSeqFieldNumber;
const int ConfigRequest::kFetchInboxMessagesToSeqFieldNumber;
const int ConfigRequest::kFetchInboxMessagesFromTimestampFieldNumber;
const int ConfigRequest::kFetchInboxMessagesToTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigRequest::ConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.ConfigRequest)
}
ConfigRequest::ConfigRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.ConfigRequest)
}
ConfigRequest::ConfigRequest(const ConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_gcm_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.update_gcm_key().size() > 0) {
    update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_gcm_key(),
      GetArenaNoVirtual());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&fetch_inbox_messages_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(fetch_inbox_messages_));
  // @@protoc_insertion_point(copy_constructor:allspark.ConfigRequest)
}

void ConfigRequest::SharedCtor() {
  update_gcm_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&fetch_inbox_messages_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(fetch_inbox_messages_));
  _cached_size_ = 0;
}

ConfigRequest::~ConfigRequest() {
  // @@protoc_insertion_point(destructor:allspark.ConfigRequest)
  SharedDtor();
}

void ConfigRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  update_gcm_key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ConfigRequest::ArenaDtor(void* object) {
  ConfigRequest* _this = reinterpret_cast< ConfigRequest* >(object);
  (void)_this;
}
void ConfigRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const ConfigRequest& ConfigRequest::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

ConfigRequest* ConfigRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConfigRequest>(arena);
}

void ConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.ConfigRequest)
  update_gcm_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&fetch_inbox_messages_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(fetch_inbox_messages_));
}

bool ConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.ConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string update_gcm_key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_gcm_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->update_gcm_key().data(), this->update_gcm_key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.ConfigRequest.update_gcm_key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fetch_inbox_messages = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_inbox_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fetch_inbox_messages_from_seq = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_inbox_messages_from_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fetch_inbox_messages_to_seq = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_inbox_messages_to_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fetch_inbox_messages_from_timestamp = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_inbox_messages_from_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fetch_inbox_messages_to_timestamp = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_inbox_messages_to_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.ConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.ConfigRequest)
  return false;
#undef DO_
}

void ConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.ConfigRequest)
  // string update_gcm_key = 1;
  if (this->update_gcm_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_gcm_key().data(), this->update_gcm_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.ConfigRequest.update_gcm_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->update_gcm_key(), output);
  }

  // bool fetch_inbox_messages = 2;
  if (this->fetch_inbox_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fetch_inbox_messages(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // int64 fetch_inbox_messages_from_seq = 4;
  if (this->fetch_inbox_messages_from_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fetch_inbox_messages_from_seq(), output);
  }

  // int64 fetch_inbox_messages_to_seq = 5;
  if (this->fetch_inbox_messages_to_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fetch_inbox_messages_to_seq(), output);
  }

  // int64 fetch_inbox_messages_from_timestamp = 6;
  if (this->fetch_inbox_messages_from_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fetch_inbox_messages_from_timestamp(), output);
  }

  // int64 fetch_inbox_messages_to_timestamp = 7;
  if (this->fetch_inbox_messages_to_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fetch_inbox_messages_to_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.ConfigRequest)
}

::google::protobuf::uint8* ConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.ConfigRequest)
  // string update_gcm_key = 1;
  if (this->update_gcm_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->update_gcm_key().data(), this->update_gcm_key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.ConfigRequest.update_gcm_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->update_gcm_key(), target);
  }

  // bool fetch_inbox_messages = 2;
  if (this->fetch_inbox_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fetch_inbox_messages(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // int64 fetch_inbox_messages_from_seq = 4;
  if (this->fetch_inbox_messages_from_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->fetch_inbox_messages_from_seq(), target);
  }

  // int64 fetch_inbox_messages_to_seq = 5;
  if (this->fetch_inbox_messages_to_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fetch_inbox_messages_to_seq(), target);
  }

  // int64 fetch_inbox_messages_from_timestamp = 6;
  if (this->fetch_inbox_messages_from_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fetch_inbox_messages_from_timestamp(), target);
  }

  // int64 fetch_inbox_messages_to_timestamp = 7;
  if (this->fetch_inbox_messages_to_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fetch_inbox_messages_to_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.ConfigRequest)
  return target;
}

size_t ConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.ConfigRequest)
  size_t total_size = 0;

  // string update_gcm_key = 1;
  if (this->update_gcm_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->update_gcm_key());
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 fetch_inbox_messages_from_seq = 4;
  if (this->fetch_inbox_messages_from_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fetch_inbox_messages_from_seq());
  }

  // int64 fetch_inbox_messages_to_seq = 5;
  if (this->fetch_inbox_messages_to_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fetch_inbox_messages_to_seq());
  }

  // int64 fetch_inbox_messages_from_timestamp = 6;
  if (this->fetch_inbox_messages_from_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fetch_inbox_messages_from_timestamp());
  }

  // int64 fetch_inbox_messages_to_timestamp = 7;
  if (this->fetch_inbox_messages_to_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fetch_inbox_messages_to_timestamp());
  }

  // bool fetch_inbox_messages = 2;
  if (this->fetch_inbox_messages() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.ConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.ConfigRequest)
    MergeFrom(*source);
  }
}

void ConfigRequest::MergeFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.update_gcm_key().size() > 0) {
    set_update_gcm_key(from.update_gcm_key());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.fetch_inbox_messages_from_seq() != 0) {
    set_fetch_inbox_messages_from_seq(from.fetch_inbox_messages_from_seq());
  }
  if (from.fetch_inbox_messages_to_seq() != 0) {
    set_fetch_inbox_messages_to_seq(from.fetch_inbox_messages_to_seq());
  }
  if (from.fetch_inbox_messages_from_timestamp() != 0) {
    set_fetch_inbox_messages_from_timestamp(from.fetch_inbox_messages_from_timestamp());
  }
  if (from.fetch_inbox_messages_to_timestamp() != 0) {
    set_fetch_inbox_messages_to_timestamp(from.fetch_inbox_messages_to_timestamp());
  }
  if (from.fetch_inbox_messages() != 0) {
    set_fetch_inbox_messages(from.fetch_inbox_messages());
  }
}

void ConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRequest::CopyFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRequest::IsInitialized() const {
  return true;
}

void ConfigRequest::Swap(ConfigRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigRequest::UnsafeArenaSwap(ConfigRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigRequest::InternalSwap(ConfigRequest* other) {
  update_gcm_key_.Swap(&other->update_gcm_key_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(fetch_inbox_messages_from_seq_, other->fetch_inbox_messages_from_seq_);
  std::swap(fetch_inbox_messages_to_seq_, other->fetch_inbox_messages_to_seq_);
  std::swap(fetch_inbox_messages_from_timestamp_, other->fetch_inbox_messages_from_timestamp_);
  std::swap(fetch_inbox_messages_to_timestamp_, other->fetch_inbox_messages_to_timestamp_);
  std::swap(fetch_inbox_messages_, other->fetch_inbox_messages_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigRequest

// string update_gcm_key = 1;
void ConfigRequest::clear_update_gcm_key() {
  update_gcm_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ConfigRequest::update_gcm_key() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.update_gcm_key)
  return update_gcm_key_.Get();
}
void ConfigRequest::set_update_gcm_key(const ::std::string& value) {
  
  update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.update_gcm_key)
}
void ConfigRequest::set_update_gcm_key(const char* value) {
  
  update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.ConfigRequest.update_gcm_key)
}
void ConfigRequest::set_update_gcm_key(const char* value,
    size_t size) {
  
  update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.ConfigRequest.update_gcm_key)
}
::std::string* ConfigRequest::mutable_update_gcm_key() {
  
  // @@protoc_insertion_point(field_mutable:allspark.ConfigRequest.update_gcm_key)
  return update_gcm_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ConfigRequest::release_update_gcm_key() {
  // @@protoc_insertion_point(field_release:allspark.ConfigRequest.update_gcm_key)
  
  return update_gcm_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ConfigRequest::unsafe_arena_release_update_gcm_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.ConfigRequest.update_gcm_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return update_gcm_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ConfigRequest::set_allocated_update_gcm_key(::std::string* update_gcm_key) {
  if (update_gcm_key != NULL) {
    
  } else {
    
  }
  update_gcm_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_gcm_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.ConfigRequest.update_gcm_key)
}
void ConfigRequest::unsafe_arena_set_allocated_update_gcm_key(
    ::std::string* update_gcm_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (update_gcm_key != NULL) {
    
  } else {
    
  }
  update_gcm_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      update_gcm_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.ConfigRequest.update_gcm_key)
}

// bool fetch_inbox_messages = 2;
void ConfigRequest::clear_fetch_inbox_messages() {
  fetch_inbox_messages_ = false;
}
bool ConfigRequest::fetch_inbox_messages() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages)
  return fetch_inbox_messages_;
}
void ConfigRequest::set_fetch_inbox_messages(bool value) {
  
  fetch_inbox_messages_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages)
}

// int64 timestamp = 3;
void ConfigRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.timestamp)
  return timestamp_;
}
void ConfigRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.timestamp)
}

// int64 fetch_inbox_messages_from_seq = 4;
void ConfigRequest::clear_fetch_inbox_messages_from_seq() {
  fetch_inbox_messages_from_seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_from_seq)
  return fetch_inbox_messages_from_seq_;
}
void ConfigRequest::set_fetch_inbox_messages_from_seq(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_from_seq)
}

// int64 fetch_inbox_messages_to_seq = 5;
void ConfigRequest::clear_fetch_inbox_messages_to_seq() {
  fetch_inbox_messages_to_seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_to_seq)
  return fetch_inbox_messages_to_seq_;
}
void ConfigRequest::set_fetch_inbox_messages_to_seq(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_to_seq)
}

// int64 fetch_inbox_messages_from_timestamp = 6;
void ConfigRequest::clear_fetch_inbox_messages_from_timestamp() {
  fetch_inbox_messages_from_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_from_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_from_timestamp)
  return fetch_inbox_messages_from_timestamp_;
}
void ConfigRequest::set_fetch_inbox_messages_from_timestamp(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_from_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_from_timestamp)
}

// int64 fetch_inbox_messages_to_timestamp = 7;
void ConfigRequest::clear_fetch_inbox_messages_to_timestamp() {
  fetch_inbox_messages_to_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_to_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_to_timestamp)
  return fetch_inbox_messages_to_timestamp_;
}
void ConfigRequest::set_fetch_inbox_messages_to_timestamp(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_to_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_to_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigResponse::kMessagesFieldNumber;
const int ConfigResponse::kFromSeqFieldNumber;
const int ConfigResponse::kToSeqFieldNumber;
const int ConfigResponse::kMoreFieldNumber;
const int ConfigResponse::kUserTimeStampDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigResponse::ConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.ConfigResponse)
}
ConfigResponse::ConfigResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  messages_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.ConfigResponse)
}
ConfigResponse::ConfigResponse(const ConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      messages_(from.messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_seq_, &from.from_seq_,
    reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(more_));
  // @@protoc_insertion_point(copy_constructor:allspark.ConfigResponse)
}

void ConfigResponse::SharedCtor() {
  ::memset(&from_seq_, 0, reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(more_));
  _cached_size_ = 0;
}

ConfigResponse::~ConfigResponse() {
  // @@protoc_insertion_point(destructor:allspark.ConfigResponse)
  SharedDtor();
}

void ConfigResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void ConfigResponse::ArenaDtor(void* object) {
  ConfigResponse* _this = reinterpret_cast< ConfigResponse* >(object);
  (void)_this;
}
void ConfigResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const ConfigResponse& ConfigResponse::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

ConfigResponse* ConfigResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ConfigResponse>(arena);
}

void ConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.ConfigResponse)
  messages_.Clear();
  ::memset(&from_seq_, 0, reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(more_));
}

bool ConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.ConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .allspark.InboxMessage messages = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 from_seq = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 to_seq = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool more = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_time_stamp_diff = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_time_stamp_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.ConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.ConfigResponse)
  return false;
#undef DO_
}

void ConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.ConfigResponse)
  // repeated .allspark.InboxMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  // int64 from_seq = 2;
  if (this->from_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->from_seq(), output);
  }

  // int64 to_seq = 3;
  if (this->to_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->to_seq(), output);
  }

  // bool more = 4;
  if (this->more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->more(), output);
  }

  // int64 user_time_stamp_diff = 5;
  if (this->user_time_stamp_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->user_time_stamp_diff(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.ConfigResponse)
}

::google::protobuf::uint8* ConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.ConfigResponse)
  // repeated .allspark.InboxMessage messages = 1;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->messages(i), false, target);
  }

  // int64 from_seq = 2;
  if (this->from_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->from_seq(), target);
  }

  // int64 to_seq = 3;
  if (this->to_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->to_seq(), target);
  }

  // bool more = 4;
  if (this->more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->more(), target);
  }

  // int64 user_time_stamp_diff = 5;
  if (this->user_time_stamp_diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->user_time_stamp_diff(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.ConfigResponse)
  return target;
}

size_t ConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.ConfigResponse)
  size_t total_size = 0;

  // repeated .allspark.InboxMessage messages = 1;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  // int64 from_seq = 2;
  if (this->from_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from_seq());
  }

  // int64 to_seq = 3;
  if (this->to_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to_seq());
  }

  // int64 user_time_stamp_diff = 5;
  if (this->user_time_stamp_diff() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_time_stamp_diff());
  }

  // bool more = 4;
  if (this->more() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.ConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.ConfigResponse)
    MergeFrom(*source);
  }
}

void ConfigResponse::MergeFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messages_.MergeFrom(from.messages_);
  if (from.from_seq() != 0) {
    set_from_seq(from.from_seq());
  }
  if (from.to_seq() != 0) {
    set_to_seq(from.to_seq());
  }
  if (from.user_time_stamp_diff() != 0) {
    set_user_time_stamp_diff(from.user_time_stamp_diff());
  }
  if (from.more() != 0) {
    set_more(from.more());
  }
}

void ConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigResponse::CopyFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigResponse::IsInitialized() const {
  return true;
}

void ConfigResponse::Swap(ConfigResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ConfigResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ConfigResponse::UnsafeArenaSwap(ConfigResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ConfigResponse::InternalSwap(ConfigResponse* other) {
  messages_.UnsafeArenaSwap(&other->messages_);
  std::swap(from_seq_, other->from_seq_);
  std::swap(to_seq_, other->to_seq_);
  std::swap(user_time_stamp_diff_, other->user_time_stamp_diff_);
  std::swap(more_, other->more_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigResponse

// repeated .allspark.InboxMessage messages = 1;
int ConfigResponse::messages_size() const {
  return messages_.size();
}
void ConfigResponse::clear_messages() {
  messages_.Clear();
}
const ::allspark::InboxMessage& ConfigResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.messages)
  return messages_.Get(index);
}
::allspark::InboxMessage* ConfigResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.ConfigResponse.messages)
  return messages_.Mutable(index);
}
::allspark::InboxMessage* ConfigResponse::add_messages() {
  // @@protoc_insertion_point(field_add:allspark.ConfigResponse.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >*
ConfigResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:allspark.ConfigResponse.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >&
ConfigResponse::messages() const {
  // @@protoc_insertion_point(field_list:allspark.ConfigResponse.messages)
  return messages_;
}

// int64 from_seq = 2;
void ConfigResponse::clear_from_seq() {
  from_seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigResponse::from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.from_seq)
  return from_seq_;
}
void ConfigResponse::set_from_seq(::google::protobuf::int64 value) {
  
  from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.from_seq)
}

// int64 to_seq = 3;
void ConfigResponse::clear_to_seq() {
  to_seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigResponse::to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.to_seq)
  return to_seq_;
}
void ConfigResponse::set_to_seq(::google::protobuf::int64 value) {
  
  to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.to_seq)
}

// bool more = 4;
void ConfigResponse::clear_more() {
  more_ = false;
}
bool ConfigResponse::more() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.more)
  return more_;
}
void ConfigResponse::set_more(bool value) {
  
  more_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.more)
}

// int64 user_time_stamp_diff = 5;
void ConfigResponse::clear_user_time_stamp_diff() {
  user_time_stamp_diff_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConfigResponse::user_time_stamp_diff() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.user_time_stamp_diff)
  return user_time_stamp_diff_;
}
void ConfigResponse::set_user_time_stamp_diff(::google::protobuf::int64 value) {
  
  user_time_stamp_diff_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.user_time_stamp_diff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeData::kHostAddressFieldNumber;
const int NodeData::kPortFieldNumber;
const int NodeData::kIsSslFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeData::NodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.NodeData)
}
NodeData::NodeData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.NodeData)
}
NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_address().size() > 0) {
    host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_address(),
      GetArenaNoVirtual());
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port(),
      GetArenaNoVirtual());
  }
  is_ssl_ = from.is_ssl_;
  // @@protoc_insertion_point(copy_constructor:allspark.NodeData)
}

void NodeData::SharedCtor() {
  host_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_ssl_ = false;
  _cached_size_ = 0;
}

NodeData::~NodeData() {
  // @@protoc_insertion_point(destructor:allspark.NodeData)
  SharedDtor();
}

void NodeData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  host_address_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  port_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NodeData::ArenaDtor(void* object) {
  NodeData* _this = reinterpret_cast< NodeData* >(object);
  (void)_this;
}
void NodeData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5].descriptor;
}

const NodeData& NodeData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

NodeData* NodeData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeData>(arena);
}

void NodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.NodeData)
  host_address_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  is_ssl_ = false;
}

bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.NodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_address = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_address().data(), this->host_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.NodeData.host_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.NodeData.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ssl = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ssl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.NodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.NodeData)
  return false;
#undef DO_
}

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.NodeData)
  // string host_address = 1;
  if (this->host_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_address().data(), this->host_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.NodeData.host_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_address(), output);
  }

  // string port = 2;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.NodeData.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  // bool is_ssl = 3;
  if (this->is_ssl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ssl(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.NodeData)
}

::google::protobuf::uint8* NodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.NodeData)
  // string host_address = 1;
  if (this->host_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_address().data(), this->host_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.NodeData.host_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_address(), target);
  }

  // string port = 2;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.NodeData.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  // bool is_ssl = 3;
  if (this->is_ssl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ssl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.NodeData)
  return target;
}

size_t NodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.NodeData)
  size_t total_size = 0;

  // string host_address = 1;
  if (this->host_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_address());
  }

  // string port = 2;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // bool is_ssl = 3;
  if (this->is_ssl() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.NodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.NodeData)
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.NodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host_address().size() > 0) {
    set_host_address(from.host_address());
  }
  if (from.port().size() > 0) {
    set_port(from.port());
  }
  if (from.is_ssl() != 0) {
    set_is_ssl(from.is_ssl());
  }
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.NodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {
  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NodeData::UnsafeArenaSwap(NodeData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeData::InternalSwap(NodeData* other) {
  host_address_.Swap(&other->host_address_);
  port_.Swap(&other->port_);
  std::swap(is_ssl_, other->is_ssl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeData

// string host_address = 1;
void NodeData::clear_host_address() {
  host_address_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NodeData::host_address() const {
  // @@protoc_insertion_point(field_get:allspark.NodeData.host_address)
  return host_address_.Get();
}
void NodeData::set_host_address(const ::std::string& value) {
  
  host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.NodeData.host_address)
}
void NodeData::set_host_address(const char* value) {
  
  host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.NodeData.host_address)
}
void NodeData::set_host_address(const char* value,
    size_t size) {
  
  host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.NodeData.host_address)
}
::std::string* NodeData::mutable_host_address() {
  
  // @@protoc_insertion_point(field_mutable:allspark.NodeData.host_address)
  return host_address_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeData::release_host_address() {
  // @@protoc_insertion_point(field_release:allspark.NodeData.host_address)
  
  return host_address_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeData::unsafe_arena_release_host_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.NodeData.host_address)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return host_address_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NodeData::set_allocated_host_address(::std::string* host_address) {
  if (host_address != NULL) {
    
  } else {
    
  }
  host_address_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_address,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.NodeData.host_address)
}
void NodeData::unsafe_arena_set_allocated_host_address(
    ::std::string* host_address) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (host_address != NULL) {
    
  } else {
    
  }
  host_address_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      host_address, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.NodeData.host_address)
}

// string port = 2;
void NodeData::clear_port() {
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NodeData::port() const {
  // @@protoc_insertion_point(field_get:allspark.NodeData.port)
  return port_.Get();
}
void NodeData::set_port(const ::std::string& value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.NodeData.port)
}
void NodeData::set_port(const char* value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.NodeData.port)
}
void NodeData::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.NodeData.port)
}
::std::string* NodeData::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:allspark.NodeData.port)
  return port_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeData::release_port() {
  // @@protoc_insertion_point(field_release:allspark.NodeData.port)
  
  return port_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NodeData::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.NodeData.port)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return port_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NodeData::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.NodeData.port)
}
void NodeData::unsafe_arena_set_allocated_port(
    ::std::string* port) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port != NULL) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.NodeData.port)
}

// bool is_ssl = 3;
void NodeData::clear_is_ssl() {
  is_ssl_ = false;
}
bool NodeData::is_ssl() const {
  // @@protoc_insertion_point(field_get:allspark.NodeData.is_ssl)
  return is_ssl_;
}
void NodeData::set_is_ssl(bool value) {
  
  is_ssl_ = value;
  // @@protoc_insertion_point(field_set:allspark.NodeData.is_ssl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionNodeData::kNodeIdFieldNumber;
const int SessionNodeData::kIsAnonymousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionNodeData::SessionNodeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.SessionNodeData)
}
SessionNodeData::SessionNodeData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.SessionNodeData)
}
SessionNodeData::SessionNodeData(const SessionNodeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id(),
      GetArenaNoVirtual());
  }
  is_anonymous_ = from.is_anonymous_;
  // @@protoc_insertion_point(copy_constructor:allspark.SessionNodeData)
}

void SessionNodeData::SharedCtor() {
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_anonymous_ = false;
  _cached_size_ = 0;
}

SessionNodeData::~SessionNodeData() {
  // @@protoc_insertion_point(destructor:allspark.SessionNodeData)
  SharedDtor();
}

void SessionNodeData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  node_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SessionNodeData::ArenaDtor(void* object) {
  SessionNodeData* _this = reinterpret_cast< SessionNodeData* >(object);
  (void)_this;
}
void SessionNodeData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SessionNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionNodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6].descriptor;
}

const SessionNodeData& SessionNodeData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

SessionNodeData* SessionNodeData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SessionNodeData>(arena);
}

void SessionNodeData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.SessionNodeData)
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  is_anonymous_ = false;
}

bool SessionNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.SessionNodeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.SessionNodeData.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_anonymous = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anonymous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.SessionNodeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.SessionNodeData)
  return false;
#undef DO_
}

void SessionNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.SessionNodeData)
  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionNodeData.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_id(), output);
  }

  // bool is_anonymous = 2;
  if (this->is_anonymous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_anonymous(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.SessionNodeData)
}

::google::protobuf::uint8* SessionNodeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.SessionNodeData)
  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionNodeData.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // bool is_anonymous = 2;
  if (this->is_anonymous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_anonymous(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.SessionNodeData)
  return target;
}

size_t SessionNodeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.SessionNodeData)
  size_t total_size = 0;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // bool is_anonymous = 2;
  if (this->is_anonymous() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionNodeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.SessionNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionNodeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionNodeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.SessionNodeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.SessionNodeData)
    MergeFrom(*source);
  }
}

void SessionNodeData::MergeFrom(const SessionNodeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.SessionNodeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.node_id().size() > 0) {
    set_node_id(from.node_id());
  }
  if (from.is_anonymous() != 0) {
    set_is_anonymous(from.is_anonymous());
  }
}

void SessionNodeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.SessionNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionNodeData::CopyFrom(const SessionNodeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.SessionNodeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionNodeData::IsInitialized() const {
  return true;
}

void SessionNodeData::Swap(SessionNodeData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SessionNodeData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SessionNodeData::UnsafeArenaSwap(SessionNodeData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SessionNodeData::InternalSwap(SessionNodeData* other) {
  node_id_.Swap(&other->node_id_);
  std::swap(is_anonymous_, other->is_anonymous_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionNodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionNodeData

// string node_id = 1;
void SessionNodeData::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SessionNodeData::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.SessionNodeData.node_id)
  return node_id_.Get();
}
void SessionNodeData::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionNodeData.node_id)
}
void SessionNodeData::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionNodeData.node_id)
}
void SessionNodeData::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionNodeData.node_id)
}
::std::string* SessionNodeData::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionNodeData.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionNodeData::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.SessionNodeData.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionNodeData::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionNodeData.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SessionNodeData::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionNodeData.node_id)
}
void SessionNodeData::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionNodeData.node_id)
}

// bool is_anonymous = 2;
void SessionNodeData::clear_is_anonymous() {
  is_anonymous_ = false;
}
bool SessionNodeData::is_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.SessionNodeData.is_anonymous)
  return is_anonymous_;
}
void SessionNodeData::set_is_anonymous(bool value) {
  
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionNodeData.is_anonymous)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionData::kSessionIdFieldNumber;
const int SessionData::kDescriptionFieldNumber;
const int SessionData::kNodeIdFieldNumber;
const int SessionData::kSessionNodesFieldNumber;
const int SessionData::kAllowAnonymousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionData::SessionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.SessionData)
}
SessionData::SessionData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  session_nodes_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.SessionData)
}
SessionData::SessionData(const SessionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      session_nodes_(from.session_nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id(),
      GetArenaNoVirtual());
  }
  allow_anonymous_ = from.allow_anonymous_;
  // @@protoc_insertion_point(copy_constructor:allspark.SessionData)
}

void SessionData::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_anonymous_ = false;
  _cached_size_ = 0;
}

SessionData::~SessionData() {
  // @@protoc_insertion_point(destructor:allspark.SessionData)
  SharedDtor();
}

void SessionData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  node_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SessionData::ArenaDtor(void* object) {
  SessionData* _this = reinterpret_cast< SessionData* >(object);
  (void)_this;
}
void SessionData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7].descriptor;
}

const SessionData& SessionData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

SessionData* SessionData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SessionData>(arena);
}

void SessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.SessionData)
  session_nodes_.Clear();
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  allow_anonymous_ = false;
}

bool SessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.SessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.SessionData.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.SessionData.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.SessionData.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .allspark.SessionNodeData session_nodes = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session_nodes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bool allow_anonymous = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_anonymous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.SessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.SessionData)
  return false;
#undef DO_
}

void SessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.SessionData)
  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionData.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionData.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string node_id = 3;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionData.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_id(), output);
  }

  // repeated .allspark.SessionNodeData session_nodes = 4;
  for (unsigned int i = 0, n = this->session_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->session_nodes(i), output);
  }

  // bool allow_anonymous = 5;
  if (this->allow_anonymous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_anonymous(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.SessionData)
}

::google::protobuf::uint8* SessionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.SessionData)
  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionData.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionData.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string node_id = 3;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.SessionData.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_id(), target);
  }

  // repeated .allspark.SessionNodeData session_nodes = 4;
  for (unsigned int i = 0, n = this->session_nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->session_nodes(i), false, target);
  }

  // bool allow_anonymous = 5;
  if (this->allow_anonymous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_anonymous(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.SessionData)
  return target;
}

size_t SessionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.SessionData)
  size_t total_size = 0;

  // repeated .allspark.SessionNodeData session_nodes = 4;
  {
    unsigned int count = this->session_nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_nodes(i));
    }
  }

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string node_id = 3;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // bool allow_anonymous = 5;
  if (this->allow_anonymous() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.SessionData)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.SessionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.SessionData)
    MergeFrom(*source);
  }
}

void SessionData::MergeFrom(const SessionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.SessionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_nodes_.MergeFrom(from.session_nodes_);
  if (from.session_id().size() > 0) {
    set_session_id(from.session_id());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.node_id().size() > 0) {
    set_node_id(from.node_id());
  }
  if (from.allow_anonymous() != 0) {
    set_allow_anonymous(from.allow_anonymous());
  }
}

void SessionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionData::CopyFrom(const SessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.SessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionData::IsInitialized() const {
  return true;
}

void SessionData::Swap(SessionData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SessionData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SessionData::UnsafeArenaSwap(SessionData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SessionData::InternalSwap(SessionData* other) {
  session_nodes_.UnsafeArenaSwap(&other->session_nodes_);
  session_id_.Swap(&other->session_id_);
  description_.Swap(&other->description_);
  node_id_.Swap(&other->node_id_);
  std::swap(allow_anonymous_, other->allow_anonymous_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionData

// string session_id = 1;
void SessionData::clear_session_id() {
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SessionData::session_id() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.session_id)
  return session_id_.Get();
}
void SessionData::set_session_id(const ::std::string& value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionData.session_id)
}
void SessionData::set_session_id(const char* value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionData.session_id)
}
void SessionData::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionData.session_id)
}
::std::string* SessionData::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.session_id)
  return session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionData::release_session_id() {
  // @@protoc_insertion_point(field_release:allspark.SessionData.session_id)
  
  return session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionData::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionData.session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SessionData::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionData.session_id)
}
void SessionData::unsafe_arena_set_allocated_session_id(
    ::std::string* session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionData.session_id)
}

// string description = 2;
void SessionData::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SessionData::description() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.description)
  return description_.Get();
}
void SessionData::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionData.description)
}
void SessionData::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionData.description)
}
void SessionData::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionData.description)
}
::std::string* SessionData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionData::release_description() {
  // @@protoc_insertion_point(field_release:allspark.SessionData.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionData::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionData.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SessionData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionData.description)
}
void SessionData::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionData.description)
}

// string node_id = 3;
void SessionData::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SessionData::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.node_id)
  return node_id_.Get();
}
void SessionData::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionData.node_id)
}
void SessionData::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionData.node_id)
}
void SessionData::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionData.node_id)
}
::std::string* SessionData::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionData::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.SessionData.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SessionData::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionData.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SessionData::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionData.node_id)
}
void SessionData::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionData.node_id)
}

// repeated .allspark.SessionNodeData session_nodes = 4;
int SessionData::session_nodes_size() const {
  return session_nodes_.size();
}
void SessionData::clear_session_nodes() {
  session_nodes_.Clear();
}
const ::allspark::SessionNodeData& SessionData::session_nodes(int index) const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.session_nodes)
  return session_nodes_.Get(index);
}
::allspark::SessionNodeData* SessionData::mutable_session_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.session_nodes)
  return session_nodes_.Mutable(index);
}
::allspark::SessionNodeData* SessionData::add_session_nodes() {
  // @@protoc_insertion_point(field_add:allspark.SessionData.session_nodes)
  return session_nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData >*
SessionData::mutable_session_nodes() {
  // @@protoc_insertion_point(field_mutable_list:allspark.SessionData.session_nodes)
  return &session_nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData >&
SessionData::session_nodes() const {
  // @@protoc_insertion_point(field_list:allspark.SessionData.session_nodes)
  return session_nodes_;
}

// bool allow_anonymous = 5;
void SessionData::clear_allow_anonymous() {
  allow_anonymous_ = false;
}
bool SessionData::allow_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.allow_anonymous)
  return allow_anonymous_;
}
void SessionData::set_allow_anonymous(bool value) {
  
  allow_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionData.allow_anonymous)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionsList::kSessionsFieldNumber;
const int SessionsList::kFromFieldNumber;
const int SessionsList::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionsList::SessionsList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.SessionsList)
}
SessionsList::SessionsList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  sessions_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.SessionsList)
}
SessionsList::SessionsList(const SessionsList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sessions_(from.sessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&from_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:allspark.SessionsList)
}

void SessionsList::SharedCtor() {
  ::memset(&from_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&from_) + sizeof(count_));
  _cached_size_ = 0;
}

SessionsList::~SessionsList() {
  // @@protoc_insertion_point(destructor:allspark.SessionsList)
  SharedDtor();
}

void SessionsList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void SessionsList::ArenaDtor(void* object) {
  SessionsList* _this = reinterpret_cast< SessionsList* >(object);
  (void)_this;
}
void SessionsList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SessionsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8].descriptor;
}

const SessionsList& SessionsList::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

SessionsList* SessionsList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SessionsList>(arena);
}

void SessionsList::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.SessionsList)
  sessions_.Clear();
  ::memset(&from_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&from_) + sizeof(count_));
}

bool SessionsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.SessionsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .allspark.SessionData sessions = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sessions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 from = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.SessionsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.SessionsList)
  return false;
#undef DO_
}

void SessionsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.SessionsList)
  // repeated .allspark.SessionData sessions = 1;
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sessions(i), output);
  }

  // int32 from = 2;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.SessionsList)
}

::google::protobuf::uint8* SessionsList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.SessionsList)
  // repeated .allspark.SessionData sessions = 1;
  for (unsigned int i = 0, n = this->sessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sessions(i), false, target);
  }

  // int32 from = 2;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.SessionsList)
  return target;
}

size_t SessionsList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.SessionsList)
  size_t total_size = 0;

  // repeated .allspark.SessionData sessions = 1;
  {
    unsigned int count = this->sessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sessions(i));
    }
  }

  // int32 from = 2;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionsList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.SessionsList)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionsList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SessionsList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.SessionsList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.SessionsList)
    MergeFrom(*source);
  }
}

void SessionsList::MergeFrom(const SessionsList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.SessionsList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sessions_.MergeFrom(from.sessions_);
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void SessionsList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.SessionsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionsList::CopyFrom(const SessionsList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.SessionsList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionsList::IsInitialized() const {
  return true;
}

void SessionsList::Swap(SessionsList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SessionsList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SessionsList::UnsafeArenaSwap(SessionsList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SessionsList::InternalSwap(SessionsList* other) {
  sessions_.UnsafeArenaSwap(&other->sessions_);
  std::swap(from_, other->from_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SessionsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionsList

// repeated .allspark.SessionData sessions = 1;
int SessionsList::sessions_size() const {
  return sessions_.size();
}
void SessionsList::clear_sessions() {
  sessions_.Clear();
}
const ::allspark::SessionData& SessionsList::sessions(int index) const {
  // @@protoc_insertion_point(field_get:allspark.SessionsList.sessions)
  return sessions_.Get(index);
}
::allspark::SessionData* SessionsList::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.SessionsList.sessions)
  return sessions_.Mutable(index);
}
::allspark::SessionData* SessionsList::add_sessions() {
  // @@protoc_insertion_point(field_add:allspark.SessionsList.sessions)
  return sessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::allspark::SessionData >*
SessionsList::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:allspark.SessionsList.sessions)
  return &sessions_;
}
const ::google::protobuf::RepeatedPtrField< ::allspark::SessionData >&
SessionsList::sessions() const {
  // @@protoc_insertion_point(field_list:allspark.SessionsList.sessions)
  return sessions_;
}

// int32 from = 2;
void SessionsList::clear_from() {
  from_ = 0;
}
::google::protobuf::int32 SessionsList::from() const {
  // @@protoc_insertion_point(field_get:allspark.SessionsList.from)
  return from_;
}
void SessionsList::set_from(::google::protobuf::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionsList.from)
}

// int32 count = 3;
void SessionsList::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 SessionsList::count() const {
  // @@protoc_insertion_point(field_get:allspark.SessionsList.count)
  return count_;
}
void SessionsList::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionsList.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodesListData::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodesListData::NodesListData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.NodesListData)
}
NodesListData::NodesListData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_id_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.NodesListData)
}
NodesListData::NodesListData(const NodesListData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_id_(from.node_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:allspark.NodesListData)
}

void NodesListData::SharedCtor() {
  _cached_size_ = 0;
}

NodesListData::~NodesListData() {
  // @@protoc_insertion_point(destructor:allspark.NodesListData)
  SharedDtor();
}

void NodesListData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void NodesListData::ArenaDtor(void* object) {
  NodesListData* _this = reinterpret_cast< NodesListData* >(object);
  (void)_this;
}
void NodesListData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodesListData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodesListData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9].descriptor;
}

const NodesListData& NodesListData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

NodesListData* NodesListData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodesListData>(arena);
}

void NodesListData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.NodesListData)
  node_id_.Clear();
}

bool NodesListData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.NodesListData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string node_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id(this->node_id_size() - 1).data(),
            this->node_id(this->node_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.NodesListData.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.NodesListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.NodesListData)
  return false;
#undef DO_
}

void NodesListData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.NodesListData)
  // repeated string node_id = 1;
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id(i).data(), this->node_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.NodesListData.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.NodesListData)
}

::google::protobuf::uint8* NodesListData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.NodesListData)
  // repeated string node_id = 1;
  for (int i = 0; i < this->node_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id(i).data(), this->node_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.NodesListData.node_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->node_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.NodesListData)
  return target;
}

size_t NodesListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.NodesListData)
  size_t total_size = 0;

  // repeated string node_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_id_size());
  for (int i = 0; i < this->node_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodesListData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.NodesListData)
  GOOGLE_DCHECK_NE(&from, this);
  const NodesListData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodesListData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.NodesListData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.NodesListData)
    MergeFrom(*source);
  }
}

void NodesListData::MergeFrom(const NodesListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.NodesListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.MergeFrom(from.node_id_);
}

void NodesListData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.NodesListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodesListData::CopyFrom(const NodesListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.NodesListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodesListData::IsInitialized() const {
  return true;
}

void NodesListData::Swap(NodesListData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodesListData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NodesListData::UnsafeArenaSwap(NodesListData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodesListData::InternalSwap(NodesListData* other) {
  node_id_.UnsafeArenaSwap(&other->node_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodesListData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodesListData

// repeated string node_id = 1;
int NodesListData::node_id_size() const {
  return node_id_.size();
}
void NodesListData::clear_node_id() {
  node_id_.Clear();
}
const ::std::string& NodesListData::node_id(int index) const {
  // @@protoc_insertion_point(field_get:allspark.NodesListData.node_id)
  return node_id_.Get(index);
}
::std::string* NodesListData::mutable_node_id(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.NodesListData.node_id)
  return node_id_.Mutable(index);
}
void NodesListData::set_node_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:allspark.NodesListData.node_id)
  node_id_.Mutable(index)->assign(value);
}
void NodesListData::set_node_id(int index, const char* value) {
  node_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:allspark.NodesListData.node_id)
}
void NodesListData::set_node_id(int index, const char* value, size_t size) {
  node_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:allspark.NodesListData.node_id)
}
::std::string* NodesListData::add_node_id() {
  // @@protoc_insertion_point(field_add_mutable:allspark.NodesListData.node_id)
  return node_id_.Add();
}
void NodesListData::add_node_id(const ::std::string& value) {
  node_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:allspark.NodesListData.node_id)
}
void NodesListData::add_node_id(const char* value) {
  node_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:allspark.NodesListData.node_id)
}
void NodesListData::add_node_id(const char* value, size_t size) {
  node_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:allspark.NodesListData.node_id)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodesListData::node_id() const {
  // @@protoc_insertion_point(field_list:allspark.NodesListData.node_id)
  return node_id_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NodesListData::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable_list:allspark.NodesListData.node_id)
  return &node_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionRequest::kIsAnonymousFieldNumber;
const int CreateSessionRequest::kWhoCanAddSessionNodesFieldNumber;
const int CreateSessionRequest::kNotifyOnlyLastFewUsersFieldNumber;
const int CreateSessionRequest::kSessionTypeFieldNumber;
const int CreateSessionRequest::kSessionGameMasterNodeIdFieldNumber;
const int CreateSessionRequest::kSessionDescriptionFieldNumber;
const int CreateSessionRequest::kAllowAnonymousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionRequest::CreateSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_game_master_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_game_master_node_id().size() > 0) {
    session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_game_master_node_id(),
      GetArenaNoVirtual());
  }
  session_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_description().size() > 0) {
    session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_description(),
      GetArenaNoVirtual());
  }
  ::memcpy(&who_can_add_session_nodes_, &from.who_can_add_session_nodes_,
    reinterpret_cast<char*>(&allow_anonymous_) -
    reinterpret_cast<char*>(&who_can_add_session_nodes_) + sizeof(allow_anonymous_));
  // @@protoc_insertion_point(copy_constructor:allspark.CreateSessionRequest)
}

void CreateSessionRequest::SharedCtor() {
  session_game_master_node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&who_can_add_session_nodes_, 0, reinterpret_cast<char*>(&allow_anonymous_) -
    reinterpret_cast<char*>(&who_can_add_session_nodes_) + sizeof(allow_anonymous_));
  _cached_size_ = 0;
}

CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:allspark.CreateSessionRequest)
  SharedDtor();
}

void CreateSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_game_master_node_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  session_description_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CreateSessionRequest::ArenaDtor(void* object) {
  CreateSessionRequest* _this = reinterpret_cast< CreateSessionRequest* >(object);
  (void)_this;
}
void CreateSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10].descriptor;
}

const CreateSessionRequest& CreateSessionRequest::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

CreateSessionRequest* CreateSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateSessionRequest>(arena);
}

void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.CreateSessionRequest)
  session_game_master_node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&who_can_add_session_nodes_, 0, reinterpret_cast<char*>(&allow_anonymous_) -
    reinterpret_cast<char*>(&who_can_add_session_nodes_) + sizeof(allow_anonymous_));
}

bool CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_anonymous = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anonymous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 who_can_add_session_nodes = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &who_can_add_session_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 notify_only_last_few_users = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_only_last_few_users_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 session_type = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_game_master_node_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_game_master_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_game_master_node_id().data(), this->session_game_master_node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.CreateSessionRequest.session_game_master_node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_description = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_description().data(), this->session_description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.CreateSessionRequest.session_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allow_anonymous = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_anonymous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.CreateSessionRequest)
  return false;
#undef DO_
}

void CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.CreateSessionRequest)
  // bool is_anonymous = 1;
  if (this->is_anonymous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_anonymous(), output);
  }

  // int32 who_can_add_session_nodes = 2;
  if (this->who_can_add_session_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->who_can_add_session_nodes(), output);
  }

  // int32 notify_only_last_few_users = 3;
  if (this->notify_only_last_few_users() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->notify_only_last_few_users(), output);
  }

  // int32 session_type = 4;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session_type(), output);
  }

  // string session_game_master_node_id = 5;
  if (this->session_game_master_node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_game_master_node_id().data(), this->session_game_master_node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.CreateSessionRequest.session_game_master_node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->session_game_master_node_id(), output);
  }

  // string session_description = 6;
  if (this->session_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_description().data(), this->session_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.CreateSessionRequest.session_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->session_description(), output);
  }

  // bool allow_anonymous = 7;
  if (this->allow_anonymous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allow_anonymous(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.CreateSessionRequest)
}

::google::protobuf::uint8* CreateSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.CreateSessionRequest)
  // bool is_anonymous = 1;
  if (this->is_anonymous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_anonymous(), target);
  }

  // int32 who_can_add_session_nodes = 2;
  if (this->who_can_add_session_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->who_can_add_session_nodes(), target);
  }

  // int32 notify_only_last_few_users = 3;
  if (this->notify_only_last_few_users() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->notify_only_last_few_users(), target);
  }

  // int32 session_type = 4;
  if (this->session_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session_type(), target);
  }

  // string session_game_master_node_id = 5;
  if (this->session_game_master_node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_game_master_node_id().data(), this->session_game_master_node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.CreateSessionRequest.session_game_master_node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->session_game_master_node_id(), target);
  }

  // string session_description = 6;
  if (this->session_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_description().data(), this->session_description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.CreateSessionRequest.session_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->session_description(), target);
  }

  // bool allow_anonymous = 7;
  if (this->allow_anonymous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allow_anonymous(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.CreateSessionRequest)
  return target;
}

size_t CreateSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.CreateSessionRequest)
  size_t total_size = 0;

  // string session_game_master_node_id = 5;
  if (this->session_game_master_node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_game_master_node_id());
  }

  // string session_description = 6;
  if (this->session_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_description());
  }

  // int32 who_can_add_session_nodes = 2;
  if (this->who_can_add_session_nodes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->who_can_add_session_nodes());
  }

  // int32 notify_only_last_few_users = 3;
  if (this->notify_only_last_few_users() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->notify_only_last_few_users());
  }

  // int32 session_type = 4;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_type());
  }

  // bool is_anonymous = 1;
  if (this->is_anonymous() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_anonymous = 7;
  if (this->allow_anonymous() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.CreateSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.CreateSessionRequest)
    MergeFrom(*source);
  }
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_game_master_node_id().size() > 0) {
    set_session_game_master_node_id(from.session_game_master_node_id());
  }
  if (from.session_description().size() > 0) {
    set_session_description(from.session_description());
  }
  if (from.who_can_add_session_nodes() != 0) {
    set_who_can_add_session_nodes(from.who_can_add_session_nodes());
  }
  if (from.notify_only_last_few_users() != 0) {
    set_notify_only_last_few_users(from.notify_only_last_few_users());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.is_anonymous() != 0) {
    set_is_anonymous(from.is_anonymous());
  }
  if (from.allow_anonymous() != 0) {
    set_allow_anonymous(from.allow_anonymous());
  }
}

void CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {
  return true;
}

void CreateSessionRequest::Swap(CreateSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateSessionRequest::UnsafeArenaSwap(CreateSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  session_game_master_node_id_.Swap(&other->session_game_master_node_id_);
  session_description_.Swap(&other->session_description_);
  std::swap(who_can_add_session_nodes_, other->who_can_add_session_nodes_);
  std::swap(notify_only_last_few_users_, other->notify_only_last_few_users_);
  std::swap(session_type_, other->session_type_);
  std::swap(is_anonymous_, other->is_anonymous_);
  std::swap(allow_anonymous_, other->allow_anonymous_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSessionRequest

// bool is_anonymous = 1;
void CreateSessionRequest::clear_is_anonymous() {
  is_anonymous_ = false;
}
bool CreateSessionRequest::is_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.is_anonymous)
  return is_anonymous_;
}
void CreateSessionRequest::set_is_anonymous(bool value) {
  
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.is_anonymous)
}

// int32 who_can_add_session_nodes = 2;
void CreateSessionRequest::clear_who_can_add_session_nodes() {
  who_can_add_session_nodes_ = 0;
}
::google::protobuf::int32 CreateSessionRequest::who_can_add_session_nodes() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.who_can_add_session_nodes)
  return who_can_add_session_nodes_;
}
void CreateSessionRequest::set_who_can_add_session_nodes(::google::protobuf::int32 value) {
  
  who_can_add_session_nodes_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.who_can_add_session_nodes)
}

// int32 notify_only_last_few_users = 3;
void CreateSessionRequest::clear_notify_only_last_few_users() {
  notify_only_last_few_users_ = 0;
}
::google::protobuf::int32 CreateSessionRequest::notify_only_last_few_users() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.notify_only_last_few_users)
  return notify_only_last_few_users_;
}
void CreateSessionRequest::set_notify_only_last_few_users(::google::protobuf::int32 value) {
  
  notify_only_last_few_users_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.notify_only_last_few_users)
}

// int32 session_type = 4;
void CreateSessionRequest::clear_session_type() {
  session_type_ = 0;
}
::google::protobuf::int32 CreateSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.session_type)
  return session_type_;
}
void CreateSessionRequest::set_session_type(::google::protobuf::int32 value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.session_type)
}

// string session_game_master_node_id = 5;
void CreateSessionRequest::clear_session_game_master_node_id() {
  session_game_master_node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateSessionRequest::session_game_master_node_id() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.session_game_master_node_id)
  return session_game_master_node_id_.Get();
}
void CreateSessionRequest::set_session_game_master_node_id(const ::std::string& value) {
  
  session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.session_game_master_node_id)
}
void CreateSessionRequest::set_session_game_master_node_id(const char* value) {
  
  session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.CreateSessionRequest.session_game_master_node_id)
}
void CreateSessionRequest::set_session_game_master_node_id(const char* value,
    size_t size) {
  
  session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.CreateSessionRequest.session_game_master_node_id)
}
::std::string* CreateSessionRequest::mutable_session_game_master_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.CreateSessionRequest.session_game_master_node_id)
  return session_game_master_node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateSessionRequest::release_session_game_master_node_id() {
  // @@protoc_insertion_point(field_release:allspark.CreateSessionRequest.session_game_master_node_id)
  
  return session_game_master_node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateSessionRequest::unsafe_arena_release_session_game_master_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.CreateSessionRequest.session_game_master_node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_game_master_node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateSessionRequest::set_allocated_session_game_master_node_id(::std::string* session_game_master_node_id) {
  if (session_game_master_node_id != NULL) {
    
  } else {
    
  }
  session_game_master_node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_game_master_node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.CreateSessionRequest.session_game_master_node_id)
}
void CreateSessionRequest::unsafe_arena_set_allocated_session_game_master_node_id(
    ::std::string* session_game_master_node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_game_master_node_id != NULL) {
    
  } else {
    
  }
  session_game_master_node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_game_master_node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.CreateSessionRequest.session_game_master_node_id)
}

// string session_description = 6;
void CreateSessionRequest::clear_session_description() {
  session_description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateSessionRequest::session_description() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.session_description)
  return session_description_.Get();
}
void CreateSessionRequest::set_session_description(const ::std::string& value) {
  
  session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.session_description)
}
void CreateSessionRequest::set_session_description(const char* value) {
  
  session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.CreateSessionRequest.session_description)
}
void CreateSessionRequest::set_session_description(const char* value,
    size_t size) {
  
  session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.CreateSessionRequest.session_description)
}
::std::string* CreateSessionRequest::mutable_session_description() {
  
  // @@protoc_insertion_point(field_mutable:allspark.CreateSessionRequest.session_description)
  return session_description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateSessionRequest::release_session_description() {
  // @@protoc_insertion_point(field_release:allspark.CreateSessionRequest.session_description)
  
  return session_description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateSessionRequest::unsafe_arena_release_session_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.CreateSessionRequest.session_description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateSessionRequest::set_allocated_session_description(::std::string* session_description) {
  if (session_description != NULL) {
    
  } else {
    
  }
  session_description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.CreateSessionRequest.session_description)
}
void CreateSessionRequest::unsafe_arena_set_allocated_session_description(
    ::std::string* session_description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_description != NULL) {
    
  } else {
    
  }
  session_description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.CreateSessionRequest.session_description)
}

// bool allow_anonymous = 7;
void CreateSessionRequest::clear_allow_anonymous() {
  allow_anonymous_ = false;
}
bool CreateSessionRequest::allow_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.allow_anonymous)
  return allow_anonymous_;
}
void CreateSessionRequest::set_allow_anonymous(bool value) {
  
  allow_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.allow_anonymous)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinSessionRequest::kIsAnonymousFieldNumber;
const int JoinSessionRequest::kSessionIdFieldNumber;
const int JoinSessionRequest::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinSessionRequest::JoinSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.JoinSessionRequest)
}
JoinSessionRequest::JoinSessionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.JoinSessionRequest)
}
JoinSessionRequest::JoinSessionRequest(const JoinSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id(),
      GetArenaNoVirtual());
  }
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id(),
      GetArenaNoVirtual());
  }
  is_anonymous_ = from.is_anonymous_;
  // @@protoc_insertion_point(copy_constructor:allspark.JoinSessionRequest)
}

void JoinSessionRequest::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_anonymous_ = false;
  _cached_size_ = 0;
}

JoinSessionRequest::~JoinSessionRequest() {
  // @@protoc_insertion_point(destructor:allspark.JoinSessionRequest)
  SharedDtor();
}

void JoinSessionRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  node_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void JoinSessionRequest::ArenaDtor(void* object) {
  JoinSessionRequest* _this = reinterpret_cast< JoinSessionRequest* >(object);
  (void)_this;
}
void JoinSessionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JoinSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11].descriptor;
}

const JoinSessionRequest& JoinSessionRequest::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

JoinSessionRequest* JoinSessionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JoinSessionRequest>(arena);
}

void JoinSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.JoinSessionRequest)
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  is_anonymous_ = false;
}

bool JoinSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.JoinSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_anonymous = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_anonymous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.JoinSessionRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.JoinSessionRequest.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.JoinSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.JoinSessionRequest)
  return false;
#undef DO_
}

void JoinSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.JoinSessionRequest)
  // bool is_anonymous = 1;
  if (this->is_anonymous() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_anonymous(), output);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.JoinSessionRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // string node_id = 3;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.JoinSessionRequest.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.JoinSessionRequest)
}

::google::protobuf::uint8* JoinSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.JoinSessionRequest)
  // bool is_anonymous = 1;
  if (this->is_anonymous() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_anonymous(), target);
  }

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.JoinSessionRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  // string node_id = 3;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.JoinSessionRequest.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.JoinSessionRequest)
  return target;
}

size_t JoinSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.JoinSessionRequest)
  size_t total_size = 0;

  // string session_id = 2;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string node_id = 3;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // bool is_anonymous = 1;
  if (this->is_anonymous() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.JoinSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.JoinSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.JoinSessionRequest)
    MergeFrom(*source);
  }
}

void JoinSessionRequest::MergeFrom(const JoinSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.JoinSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_id().size() > 0) {
    set_session_id(from.session_id());
  }
  if (from.node_id().size() > 0) {
    set_node_id(from.node_id());
  }
  if (from.is_anonymous() != 0) {
    set_is_anonymous(from.is_anonymous());
  }
}

void JoinSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.JoinSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinSessionRequest::CopyFrom(const JoinSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.JoinSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSessionRequest::IsInitialized() const {
  return true;
}

void JoinSessionRequest::Swap(JoinSessionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JoinSessionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void JoinSessionRequest::UnsafeArenaSwap(JoinSessionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JoinSessionRequest::InternalSwap(JoinSessionRequest* other) {
  session_id_.Swap(&other->session_id_);
  node_id_.Swap(&other->node_id_);
  std::swap(is_anonymous_, other->is_anonymous_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinSessionRequest

// bool is_anonymous = 1;
void JoinSessionRequest::clear_is_anonymous() {
  is_anonymous_ = false;
}
bool JoinSessionRequest::is_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.JoinSessionRequest.is_anonymous)
  return is_anonymous_;
}
void JoinSessionRequest::set_is_anonymous(bool value) {
  
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.JoinSessionRequest.is_anonymous)
}

// string session_id = 2;
void JoinSessionRequest::clear_session_id() {
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:allspark.JoinSessionRequest.session_id)
  return session_id_.Get();
}
void JoinSessionRequest::set_session_id(const ::std::string& value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.JoinSessionRequest.session_id)
}
void JoinSessionRequest::set_session_id(const char* value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.JoinSessionRequest.session_id)
}
void JoinSessionRequest::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.JoinSessionRequest.session_id)
}
::std::string* JoinSessionRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.JoinSessionRequest.session_id)
  return session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:allspark.JoinSessionRequest.session_id)
  
  return session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinSessionRequest::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.JoinSessionRequest.session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinSessionRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.JoinSessionRequest.session_id)
}
void JoinSessionRequest::unsafe_arena_set_allocated_session_id(
    ::std::string* session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.JoinSessionRequest.session_id)
}

// string node_id = 3;
void JoinSessionRequest::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinSessionRequest::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.JoinSessionRequest.node_id)
  return node_id_.Get();
}
void JoinSessionRequest::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.JoinSessionRequest.node_id)
}
void JoinSessionRequest::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.JoinSessionRequest.node_id)
}
void JoinSessionRequest::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.JoinSessionRequest.node_id)
}
::std::string* JoinSessionRequest::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.JoinSessionRequest.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinSessionRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.JoinSessionRequest.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinSessionRequest::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.JoinSessionRequest.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinSessionRequest::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.JoinSessionRequest.node_id)
}
void JoinSessionRequest::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.JoinSessionRequest.node_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInboxMessagesRequest::kSessionIdFieldNumber;
const int GetInboxMessagesRequest::kNodeIdFieldNumber;
const int GetInboxMessagesRequest::kFromSeqFieldNumber;
const int GetInboxMessagesRequest::kToSeqFieldNumber;
const int GetInboxMessagesRequest::kFromTimestampFieldNumber;
const int GetInboxMessagesRequest::kToTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInboxMessagesRequest::GetInboxMessagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.GetInboxMessagesRequest)
}
GetInboxMessagesRequest::GetInboxMessagesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.GetInboxMessagesRequest)
}
GetInboxMessagesRequest::GetInboxMessagesRequest(const GetInboxMessagesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_id().size() > 0) {
    session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_id(),
      GetArenaNoVirtual());
  }
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_id().size() > 0) {
    node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_id(),
      GetArenaNoVirtual());
  }
  ::memcpy(&from_seq_, &from.from_seq_,
    reinterpret_cast<char*>(&to_timestamp_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(to_timestamp_));
  // @@protoc_insertion_point(copy_constructor:allspark.GetInboxMessagesRequest)
}

void GetInboxMessagesRequest::SharedCtor() {
  session_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_seq_, 0, reinterpret_cast<char*>(&to_timestamp_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(to_timestamp_));
  _cached_size_ = 0;
}

GetInboxMessagesRequest::~GetInboxMessagesRequest() {
  // @@protoc_insertion_point(destructor:allspark.GetInboxMessagesRequest)
  SharedDtor();
}

void GetInboxMessagesRequest::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  session_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  node_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetInboxMessagesRequest::ArenaDtor(void* object) {
  GetInboxMessagesRequest* _this = reinterpret_cast< GetInboxMessagesRequest* >(object);
  (void)_this;
}
void GetInboxMessagesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetInboxMessagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInboxMessagesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12].descriptor;
}

const GetInboxMessagesRequest& GetInboxMessagesRequest::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

GetInboxMessagesRequest* GetInboxMessagesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetInboxMessagesRequest>(arena);
}

void GetInboxMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.GetInboxMessagesRequest)
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&from_seq_, 0, reinterpret_cast<char*>(&to_timestamp_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(to_timestamp_));
}

bool GetInboxMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.GetInboxMessagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.GetInboxMessagesRequest.session_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 from_seq = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_seq = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 from_timestamp = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 to_timestamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.GetInboxMessagesRequest.node_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.GetInboxMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.GetInboxMessagesRequest)
  return false;
#undef DO_
}

void GetInboxMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.GetInboxMessagesRequest)
  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.GetInboxMessagesRequest.session_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // int32 from_seq = 2;
  if (this->from_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_seq(), output);
  }

  // int32 to_seq = 3;
  if (this->to_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->to_seq(), output);
  }

  // int64 from_timestamp = 4;
  if (this->from_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->from_timestamp(), output);
  }

  // int64 to_timestamp = 5;
  if (this->to_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->to_timestamp(), output);
  }

  // string node_id = 6;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.GetInboxMessagesRequest.node_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->node_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.GetInboxMessagesRequest)
}

::google::protobuf::uint8* GetInboxMessagesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.GetInboxMessagesRequest)
  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.GetInboxMessagesRequest.session_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session_id(), target);
  }

  // int32 from_seq = 2;
  if (this->from_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_seq(), target);
  }

  // int32 to_seq = 3;
  if (this->to_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->to_seq(), target);
  }

  // int64 from_timestamp = 4;
  if (this->from_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->from_timestamp(), target);
  }

  // int64 to_timestamp = 5;
  if (this->to_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->to_timestamp(), target);
  }

  // string node_id = 6;
  if (this->node_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.GetInboxMessagesRequest.node_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->node_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.GetInboxMessagesRequest)
  return target;
}

size_t GetInboxMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.GetInboxMessagesRequest)
  size_t total_size = 0;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_id());
  }

  // string node_id = 6;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_id());
  }

  // int32 from_seq = 2;
  if (this->from_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_seq());
  }

  // int32 to_seq = 3;
  if (this->to_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_seq());
  }

  // int64 from_timestamp = 4;
  if (this->from_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from_timestamp());
  }

  // int64 to_timestamp = 5;
  if (this->to_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInboxMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.GetInboxMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInboxMessagesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInboxMessagesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.GetInboxMessagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.GetInboxMessagesRequest)
    MergeFrom(*source);
  }
}

void GetInboxMessagesRequest::MergeFrom(const GetInboxMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.GetInboxMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_id().size() > 0) {
    set_session_id(from.session_id());
  }
  if (from.node_id().size() > 0) {
    set_node_id(from.node_id());
  }
  if (from.from_seq() != 0) {
    set_from_seq(from.from_seq());
  }
  if (from.to_seq() != 0) {
    set_to_seq(from.to_seq());
  }
  if (from.from_timestamp() != 0) {
    set_from_timestamp(from.from_timestamp());
  }
  if (from.to_timestamp() != 0) {
    set_to_timestamp(from.to_timestamp());
  }
}

void GetInboxMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.GetInboxMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInboxMessagesRequest::CopyFrom(const GetInboxMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.GetInboxMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInboxMessagesRequest::IsInitialized() const {
  return true;
}

void GetInboxMessagesRequest::Swap(GetInboxMessagesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetInboxMessagesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetInboxMessagesRequest::UnsafeArenaSwap(GetInboxMessagesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetInboxMessagesRequest::InternalSwap(GetInboxMessagesRequest* other) {
  session_id_.Swap(&other->session_id_);
  node_id_.Swap(&other->node_id_);
  std::swap(from_seq_, other->from_seq_);
  std::swap(to_seq_, other->to_seq_);
  std::swap(from_timestamp_, other->from_timestamp_);
  std::swap(to_timestamp_, other->to_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInboxMessagesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInboxMessagesRequest

// string session_id = 1;
void GetInboxMessagesRequest::clear_session_id() {
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetInboxMessagesRequest::session_id() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.session_id)
  return session_id_.Get();
}
void GetInboxMessagesRequest::set_session_id(const ::std::string& value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.session_id)
}
void GetInboxMessagesRequest::set_session_id(const char* value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.GetInboxMessagesRequest.session_id)
}
void GetInboxMessagesRequest::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.GetInboxMessagesRequest.session_id)
}
::std::string* GetInboxMessagesRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.GetInboxMessagesRequest.session_id)
  return session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetInboxMessagesRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:allspark.GetInboxMessagesRequest.session_id)
  
  return session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetInboxMessagesRequest::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.GetInboxMessagesRequest.session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetInboxMessagesRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.GetInboxMessagesRequest.session_id)
}
void GetInboxMessagesRequest::unsafe_arena_set_allocated_session_id(
    ::std::string* session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.GetInboxMessagesRequest.session_id)
}

// string node_id = 6;
void GetInboxMessagesRequest::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetInboxMessagesRequest::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.node_id)
  return node_id_.Get();
}
void GetInboxMessagesRequest::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.node_id)
}
void GetInboxMessagesRequest::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.GetInboxMessagesRequest.node_id)
}
void GetInboxMessagesRequest::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.GetInboxMessagesRequest.node_id)
}
::std::string* GetInboxMessagesRequest::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.GetInboxMessagesRequest.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetInboxMessagesRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.GetInboxMessagesRequest.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetInboxMessagesRequest::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.GetInboxMessagesRequest.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetInboxMessagesRequest::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.GetInboxMessagesRequest.node_id)
}
void GetInboxMessagesRequest::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.GetInboxMessagesRequest.node_id)
}

// int32 from_seq = 2;
void GetInboxMessagesRequest::clear_from_seq() {
  from_seq_ = 0;
}
::google::protobuf::int32 GetInboxMessagesRequest::from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.from_seq)
  return from_seq_;
}
void GetInboxMessagesRequest::set_from_seq(::google::protobuf::int32 value) {
  
  from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.from_seq)
}

// int32 to_seq = 3;
void GetInboxMessagesRequest::clear_to_seq() {
  to_seq_ = 0;
}
::google::protobuf::int32 GetInboxMessagesRequest::to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.to_seq)
  return to_seq_;
}
void GetInboxMessagesRequest::set_to_seq(::google::protobuf::int32 value) {
  
  to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.to_seq)
}

// int64 from_timestamp = 4;
void GetInboxMessagesRequest::clear_from_timestamp() {
  from_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetInboxMessagesRequest::from_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.from_timestamp)
  return from_timestamp_;
}
void GetInboxMessagesRequest::set_from_timestamp(::google::protobuf::int64 value) {
  
  from_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.from_timestamp)
}

// int64 to_timestamp = 5;
void GetInboxMessagesRequest::clear_to_timestamp() {
  to_timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 GetInboxMessagesRequest::to_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.to_timestamp)
  return to_timestamp_;
}
void GetInboxMessagesRequest::set_to_timestamp(::google::protobuf::int64 value) {
  
  to_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.to_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InboxMessagesResponse::kInboxMessagesFieldNumber;
const int InboxMessagesResponse::kFromSeqFieldNumber;
const int InboxMessagesResponse::kToSeqFieldNumber;
const int InboxMessagesResponse::kMoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InboxMessagesResponse::InboxMessagesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.InboxMessagesResponse)
}
InboxMessagesResponse::InboxMessagesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  inbox_messages_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.InboxMessagesResponse)
}
InboxMessagesResponse::InboxMessagesResponse(const InboxMessagesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inbox_messages_(from.inbox_messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_seq_, &from.from_seq_,
    reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(more_));
  // @@protoc_insertion_point(copy_constructor:allspark.InboxMessagesResponse)
}

void InboxMessagesResponse::SharedCtor() {
  ::memset(&from_seq_, 0, reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(more_));
  _cached_size_ = 0;
}

InboxMessagesResponse::~InboxMessagesResponse() {
  // @@protoc_insertion_point(destructor:allspark.InboxMessagesResponse)
  SharedDtor();
}

void InboxMessagesResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void InboxMessagesResponse::ArenaDtor(void* object) {
  InboxMessagesResponse* _this = reinterpret_cast< InboxMessagesResponse* >(object);
  (void)_this;
}
void InboxMessagesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void InboxMessagesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InboxMessagesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13].descriptor;
}

const InboxMessagesResponse& InboxMessagesResponse::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

InboxMessagesResponse* InboxMessagesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<InboxMessagesResponse>(arena);
}

void InboxMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.InboxMessagesResponse)
  inbox_messages_.Clear();
  ::memset(&from_seq_, 0, reinterpret_cast<char*>(&more_) -
    reinterpret_cast<char*>(&from_seq_) + sizeof(more_));
}

bool InboxMessagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.InboxMessagesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .allspark.InboxMessage inbox_messages = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inbox_messages()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 from_seq = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 to_seq = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool more = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.InboxMessagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.InboxMessagesResponse)
  return false;
#undef DO_
}

void InboxMessagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.InboxMessagesResponse)
  // repeated .allspark.InboxMessage inbox_messages = 1;
  for (unsigned int i = 0, n = this->inbox_messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inbox_messages(i), output);
  }

  // int64 from_seq = 2;
  if (this->from_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->from_seq(), output);
  }

  // int64 to_seq = 3;
  if (this->to_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->to_seq(), output);
  }

  // bool more = 4;
  if (this->more() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->more(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.InboxMessagesResponse)
}

::google::protobuf::uint8* InboxMessagesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.InboxMessagesResponse)
  // repeated .allspark.InboxMessage inbox_messages = 1;
  for (unsigned int i = 0, n = this->inbox_messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->inbox_messages(i), false, target);
  }

  // int64 from_seq = 2;
  if (this->from_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->from_seq(), target);
  }

  // int64 to_seq = 3;
  if (this->to_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->to_seq(), target);
  }

  // bool more = 4;
  if (this->more() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->more(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.InboxMessagesResponse)
  return target;
}

size_t InboxMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.InboxMessagesResponse)
  size_t total_size = 0;

  // repeated .allspark.InboxMessage inbox_messages = 1;
  {
    unsigned int count = this->inbox_messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inbox_messages(i));
    }
  }

  // int64 from_seq = 2;
  if (this->from_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from_seq());
  }

  // int64 to_seq = 3;
  if (this->to_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to_seq());
  }

  // bool more = 4;
  if (this->more() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InboxMessagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.InboxMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InboxMessagesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InboxMessagesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.InboxMessagesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.InboxMessagesResponse)
    MergeFrom(*source);
  }
}

void InboxMessagesResponse::MergeFrom(const InboxMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.InboxMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inbox_messages_.MergeFrom(from.inbox_messages_);
  if (from.from_seq() != 0) {
    set_from_seq(from.from_seq());
  }
  if (from.to_seq() != 0) {
    set_to_seq(from.to_seq());
  }
  if (from.more() != 0) {
    set_more(from.more());
  }
}

void InboxMessagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.InboxMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InboxMessagesResponse::CopyFrom(const InboxMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.InboxMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboxMessagesResponse::IsInitialized() const {
  return true;
}

void InboxMessagesResponse::Swap(InboxMessagesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    InboxMessagesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void InboxMessagesResponse::UnsafeArenaSwap(InboxMessagesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void InboxMessagesResponse::InternalSwap(InboxMessagesResponse* other) {
  inbox_messages_.UnsafeArenaSwap(&other->inbox_messages_);
  std::swap(from_seq_, other->from_seq_);
  std::swap(to_seq_, other->to_seq_);
  std::swap(more_, other->more_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InboxMessagesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InboxMessagesResponse

// repeated .allspark.InboxMessage inbox_messages = 1;
int InboxMessagesResponse::inbox_messages_size() const {
  return inbox_messages_.size();
}
void InboxMessagesResponse::clear_inbox_messages() {
  inbox_messages_.Clear();
}
const ::allspark::InboxMessage& InboxMessagesResponse::inbox_messages(int index) const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_.Get(index);
}
::allspark::InboxMessage* InboxMessagesResponse::mutable_inbox_messages(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_.Mutable(index);
}
::allspark::InboxMessage* InboxMessagesResponse::add_inbox_messages() {
  // @@protoc_insertion_point(field_add:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >*
InboxMessagesResponse::mutable_inbox_messages() {
  // @@protoc_insertion_point(field_mutable_list:allspark.InboxMessagesResponse.inbox_messages)
  return &inbox_messages_;
}
const ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >&
InboxMessagesResponse::inbox_messages() const {
  // @@protoc_insertion_point(field_list:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_;
}

// int64 from_seq = 2;
void InboxMessagesResponse::clear_from_seq() {
  from_seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InboxMessagesResponse::from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.from_seq)
  return from_seq_;
}
void InboxMessagesResponse::set_from_seq(::google::protobuf::int64 value) {
  
  from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessagesResponse.from_seq)
}

// int64 to_seq = 3;
void InboxMessagesResponse::clear_to_seq() {
  to_seq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InboxMessagesResponse::to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.to_seq)
  return to_seq_;
}
void InboxMessagesResponse::set_to_seq(::google::protobuf::int64 value) {
  
  to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessagesResponse.to_seq)
}

// bool more = 4;
void InboxMessagesResponse::clear_more() {
  more_ = false;
}
bool InboxMessagesResponse::more() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.more)
  return more_;
}
void InboxMessagesResponse::set_more(bool value) {
  
  more_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessagesResponse.more)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BooleanData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BooleanData::BooleanData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.BooleanData)
}
BooleanData::BooleanData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.BooleanData)
}
BooleanData::BooleanData(const BooleanData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:allspark.BooleanData)
}

void BooleanData::SharedCtor() {
  value_ = false;
  _cached_size_ = 0;
}

BooleanData::~BooleanData() {
  // @@protoc_insertion_point(destructor:allspark.BooleanData)
  SharedDtor();
}

void BooleanData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void BooleanData::ArenaDtor(void* object) {
  BooleanData* _this = reinterpret_cast< BooleanData* >(object);
  (void)_this;
}
void BooleanData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BooleanData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14].descriptor;
}

const BooleanData& BooleanData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

BooleanData* BooleanData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BooleanData>(arena);
}

void BooleanData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.BooleanData)
  value_ = false;
}

bool BooleanData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.BooleanData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool value = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.BooleanData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.BooleanData)
  return false;
#undef DO_
}

void BooleanData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.BooleanData)
  // bool value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.BooleanData)
}

::google::protobuf::uint8* BooleanData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.BooleanData)
  // bool value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.BooleanData)
  return target;
}

size_t BooleanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.BooleanData)
  size_t total_size = 0;

  // bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.BooleanData)
  GOOGLE_DCHECK_NE(&from, this);
  const BooleanData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BooleanData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.BooleanData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.BooleanData)
    MergeFrom(*source);
  }
}

void BooleanData::MergeFrom(const BooleanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.BooleanData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BooleanData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.BooleanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanData::CopyFrom(const BooleanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.BooleanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanData::IsInitialized() const {
  return true;
}

void BooleanData::Swap(BooleanData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BooleanData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BooleanData::UnsafeArenaSwap(BooleanData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BooleanData::InternalSwap(BooleanData* other) {
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BooleanData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BooleanData

// bool value = 1;
void BooleanData::clear_value() {
  value_ = false;
}
bool BooleanData::value() const {
  // @@protoc_insertion_point(field_get:allspark.BooleanData.value)
  return value_;
}
void BooleanData::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:allspark.BooleanData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringData::StringData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.StringData)
}
StringData::StringData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.StringData)
}
StringData::StringData(const StringData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:allspark.StringData)
}

void StringData::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StringData::~StringData() {
  // @@protoc_insertion_point(destructor:allspark.StringData)
  SharedDtor();
}

void StringData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StringData::ArenaDtor(void* object) {
  StringData* _this = reinterpret_cast< StringData* >(object);
  (void)_this;
}
void StringData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StringData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15].descriptor;
}

const StringData& StringData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

StringData* StringData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StringData>(arena);
}

void StringData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.StringData)
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool StringData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.StringData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string value = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "allspark.StringData.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.StringData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.StringData)
  return false;
#undef DO_
}

void StringData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.StringData)
  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.StringData.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:allspark.StringData)
}

::google::protobuf::uint8* StringData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.StringData)
  // string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "allspark.StringData.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:allspark.StringData)
  return target;
}

size_t StringData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.StringData)
  size_t total_size = 0;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.StringData)
  GOOGLE_DCHECK_NE(&from, this);
  const StringData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StringData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.StringData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.StringData)
    MergeFrom(*source);
  }
}

void StringData::MergeFrom(const StringData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.StringData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.value().size() > 0) {
    set_value(from.value());
  }
}

void StringData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.StringData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringData::CopyFrom(const StringData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.StringData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringData::IsInitialized() const {
  return true;
}

void StringData::Swap(StringData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StringData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StringData::UnsafeArenaSwap(StringData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StringData::InternalSwap(StringData* other) {
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringData

// string value = 1;
void StringData::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StringData::value() const {
  // @@protoc_insertion_point(field_get:allspark.StringData.value)
  return value_.Get();
}
void StringData::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.StringData.value)
}
void StringData::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.StringData.value)
}
void StringData::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.StringData.value)
}
::std::string* StringData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:allspark.StringData.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StringData::release_value() {
  // @@protoc_insertion_point(field_release:allspark.StringData.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StringData::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.StringData.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StringData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.StringData.value)
}
void StringData::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.StringData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyData::EmptyData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_wire_5ftransfers_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:allspark.EmptyData)
}
EmptyData::EmptyData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:allspark.EmptyData)
}
EmptyData::EmptyData(const EmptyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:allspark.EmptyData)
}

void EmptyData::SharedCtor() {
  _cached_size_ = 0;
}

EmptyData::~EmptyData() {
  // @@protoc_insertion_point(destructor:allspark.EmptyData)
  SharedDtor();
}

void EmptyData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void EmptyData::ArenaDtor(void* object) {
  EmptyData* _this = reinterpret_cast< EmptyData* >(object);
  (void)_this;
}
void EmptyData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EmptyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16].descriptor;
}

const EmptyData& EmptyData::default_instance() {
  protobuf_InitDefaults_wire_5ftransfers_2eproto();
  return *internal_default_instance();
}

EmptyData* EmptyData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EmptyData>(arena);
}

void EmptyData::Clear() {
// @@protoc_insertion_point(message_clear_start:allspark.EmptyData)
}

bool EmptyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:allspark.EmptyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:allspark.EmptyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:allspark.EmptyData)
  return false;
#undef DO_
}

void EmptyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:allspark.EmptyData)
  // @@protoc_insertion_point(serialize_end:allspark.EmptyData)
}

::google::protobuf::uint8* EmptyData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:allspark.EmptyData)
  // @@protoc_insertion_point(serialize_to_array_end:allspark.EmptyData)
  return target;
}

size_t EmptyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:allspark.EmptyData)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:allspark.EmptyData)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:allspark.EmptyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:allspark.EmptyData)
    MergeFrom(*source);
  }
}

void EmptyData::MergeFrom(const EmptyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:allspark.EmptyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void EmptyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:allspark.EmptyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyData::CopyFrom(const EmptyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:allspark.EmptyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyData::IsInitialized() const {
  return true;
}

void EmptyData::Swap(EmptyData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EmptyData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EmptyData::UnsafeArenaSwap(EmptyData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EmptyData::InternalSwap(EmptyData* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyData

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace allspark

// @@protoc_insertion_point(global_scope)
