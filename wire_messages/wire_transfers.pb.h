// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire_transfers.proto

#ifndef PROTOBUF_wire_5ftransfers_2eproto__INCLUDED
#define PROTOBUF_wire_5ftransfers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace allspark {
class AuthData;
class AuthDataDefaultTypeInternal;
extern AuthDataDefaultTypeInternal _AuthData_default_instance_;
class BooleanData;
class BooleanDataDefaultTypeInternal;
extern BooleanDataDefaultTypeInternal _BooleanData_default_instance_;
class ConfigRequest;
class ConfigRequestDefaultTypeInternal;
extern ConfigRequestDefaultTypeInternal _ConfigRequest_default_instance_;
class ConfigResponse;
class ConfigResponseDefaultTypeInternal;
extern ConfigResponseDefaultTypeInternal _ConfigResponse_default_instance_;
class CreateSessionRequest;
class CreateSessionRequestDefaultTypeInternal;
extern CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
class EmptyData;
class EmptyDataDefaultTypeInternal;
extern EmptyDataDefaultTypeInternal _EmptyData_default_instance_;
class GetInboxMessagesRequest;
class GetInboxMessagesRequestDefaultTypeInternal;
extern GetInboxMessagesRequestDefaultTypeInternal _GetInboxMessagesRequest_default_instance_;
class InboxMessage;
class InboxMessageDefaultTypeInternal;
extern InboxMessageDefaultTypeInternal _InboxMessage_default_instance_;
class InboxMessagesResponse;
class InboxMessagesResponseDefaultTypeInternal;
extern InboxMessagesResponseDefaultTypeInternal _InboxMessagesResponse_default_instance_;
class JoinSessionRequest;
class JoinSessionRequestDefaultTypeInternal;
extern JoinSessionRequestDefaultTypeInternal _JoinSessionRequest_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NodeData;
class NodeDataDefaultTypeInternal;
extern NodeDataDefaultTypeInternal _NodeData_default_instance_;
class NodesListData;
class NodesListDataDefaultTypeInternal;
extern NodesListDataDefaultTypeInternal _NodesListData_default_instance_;
class SessionData;
class SessionDataDefaultTypeInternal;
extern SessionDataDefaultTypeInternal _SessionData_default_instance_;
class SessionNodeData;
class SessionNodeDataDefaultTypeInternal;
extern SessionNodeDataDefaultTypeInternal _SessionNodeData_default_instance_;
class SessionsList;
class SessionsListDefaultTypeInternal;
extern SessionsListDefaultTypeInternal _SessionsList_default_instance_;
class StringData;
class StringDataDefaultTypeInternal;
extern StringDataDefaultTypeInternal _StringData_default_instance_;
}  // namespace allspark

namespace allspark {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_wire_5ftransfers_2eproto();
void protobuf_InitDefaults_wire_5ftransfers_2eproto();

// ===================================================================

class AuthData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.AuthData) */ {
 public:
  AuthData();
  virtual ~AuthData();

  AuthData(const AuthData& from);

  inline AuthData& operator=(const AuthData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthData& default_instance();

  static inline const AuthData* internal_default_instance() {
    return reinterpret_cast<const AuthData*>(
               &_AuthData_default_instance_);
  }

  void UnsafeArenaSwap(AuthData* other);
  void Swap(AuthData* other);

  // implements Message ----------------------------------------------

  inline AuthData* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthData& from);
  void MergeFrom(const AuthData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthData* other);
  protected:
  explicit AuthData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);
  ::std::string* unsafe_arena_release_node_id();
  void unsafe_arena_set_allocated_node_id(
      ::std::string* node_id);

  // int32 client_type = 2;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  ::google::protobuf::int32 client_type() const;
  void set_client_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:allspark.AuthData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::int32 client_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }

  void UnsafeArenaSwap(Message* other);
  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Message* other);
  protected:
  explicit Message(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dest_id = 1;
  void clear_dest_id();
  static const int kDestIdFieldNumber = 1;
  const ::std::string& dest_id() const;
  void set_dest_id(const ::std::string& value);
  void set_dest_id(const char* value);
  void set_dest_id(const char* value, size_t size);
  ::std::string* mutable_dest_id();
  ::std::string* release_dest_id();
  void set_allocated_dest_id(::std::string* dest_id);
  ::std::string* unsafe_arena_release_dest_id();
  void unsafe_arena_set_allocated_dest_id(
      ::std::string* dest_id);

  // string src_id = 2;
  void clear_src_id();
  static const int kSrcIdFieldNumber = 2;
  const ::std::string& src_id() const;
  void set_src_id(const ::std::string& value);
  void set_src_id(const char* value);
  void set_src_id(const char* value, size_t size);
  ::std::string* mutable_src_id();
  ::std::string* release_src_id();
  void set_allocated_src_id(::std::string* src_id);
  ::std::string* unsafe_arena_release_src_id();
  void unsafe_arena_set_allocated_src_id(
      ::std::string* src_id);

  // string dest_session_id = 3;
  void clear_dest_session_id();
  static const int kDestSessionIdFieldNumber = 3;
  const ::std::string& dest_session_id() const;
  void set_dest_session_id(const ::std::string& value);
  void set_dest_session_id(const char* value);
  void set_dest_session_id(const char* value, size_t size);
  ::std::string* mutable_dest_session_id();
  ::std::string* release_dest_session_id();
  void set_allocated_dest_session_id(::std::string* dest_session_id);
  ::std::string* unsafe_arena_release_dest_session_id();
  void unsafe_arena_set_allocated_dest_session_id(
      ::std::string* dest_session_id);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // bytes payload = 5;
  void clear_payload();
  static const int kPayloadFieldNumber = 5;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);
  ::std::string* unsafe_arena_release_payload();
  void unsafe_arena_set_allocated_payload(
      ::std::string* payload);

  // bytes payload1 = 6;
  void clear_payload1();
  static const int kPayload1FieldNumber = 6;
  const ::std::string& payload1() const;
  void set_payload1(const ::std::string& value);
  void set_payload1(const char* value);
  void set_payload1(const void* value, size_t size);
  ::std::string* mutable_payload1();
  ::std::string* release_payload1();
  void set_allocated_payload1(::std::string* payload1);
  ::std::string* unsafe_arena_release_payload1();
  void unsafe_arena_set_allocated_payload1(
      ::std::string* payload1);

  // bytes payload2 = 7;
  void clear_payload2();
  static const int kPayload2FieldNumber = 7;
  const ::std::string& payload2() const;
  void set_payload2(const ::std::string& value);
  void set_payload2(const char* value);
  void set_payload2(const void* value, size_t size);
  ::std::string* mutable_payload2();
  ::std::string* release_payload2();
  void set_allocated_payload2(::std::string* payload2);
  ::std::string* unsafe_arena_release_payload2();
  void unsafe_arena_set_allocated_payload2(
      ::std::string* payload2);

  // string id = 8;
  void clear_id();
  static const int kIdFieldNumber = 8;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // bool is_ack_required = 9;
  void clear_is_ack_required();
  static const int kIsAckRequiredFieldNumber = 9;
  bool is_ack_required() const;
  void set_is_ack_required(bool value);

  // bool is_anonymize_src_id = 10;
  void clear_is_anonymize_src_id();
  static const int kIsAnonymizeSrcIdFieldNumber = 10;
  bool is_anonymize_src_id() const;
  void set_is_anonymize_src_id(bool value);

  // string anonymize_src_id = 11;
  void clear_anonymize_src_id();
  static const int kAnonymizeSrcIdFieldNumber = 11;
  const ::std::string& anonymize_src_id() const;
  void set_anonymize_src_id(const ::std::string& value);
  void set_anonymize_src_id(const char* value);
  void set_anonymize_src_id(const char* value, size_t size);
  ::std::string* mutable_anonymize_src_id();
  ::std::string* release_anonymize_src_id();
  void set_allocated_anonymize_src_id(::std::string* anonymize_src_id);
  ::std::string* unsafe_arena_release_anonymize_src_id();
  void unsafe_arena_set_allocated_anonymize_src_id(
      ::std::string* anonymize_src_id);

  // int64 timestamp = 12;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 12;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // bytes raw_data = 13;
  void clear_raw_data();
  static const int kRawDataFieldNumber = 13;
  const ::std::string& raw_data() const;
  void set_raw_data(const ::std::string& value);
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  ::std::string* mutable_raw_data();
  ::std::string* release_raw_data();
  void set_allocated_raw_data(::std::string* raw_data);
  ::std::string* unsafe_arena_release_raw_data();
  void unsafe_arena_set_allocated_raw_data(
      ::std::string* raw_data);

  // @@protoc_insertion_point(class_scope:allspark.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr dest_id_;
  ::google::protobuf::internal::ArenaStringPtr src_id_;
  ::google::protobuf::internal::ArenaStringPtr dest_session_id_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::internal::ArenaStringPtr payload1_;
  ::google::protobuf::internal::ArenaStringPtr payload2_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr anonymize_src_id_;
  ::google::protobuf::internal::ArenaStringPtr raw_data_;
  ::google::protobuf::int32 type_;
  bool is_ack_required_;
  bool is_anonymize_src_id_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class InboxMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.InboxMessage) */ {
 public:
  InboxMessage();
  virtual ~InboxMessage();

  InboxMessage(const InboxMessage& from);

  inline InboxMessage& operator=(const InboxMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const InboxMessage& default_instance();

  static inline const InboxMessage* internal_default_instance() {
    return reinterpret_cast<const InboxMessage*>(
               &_InboxMessage_default_instance_);
  }

  void UnsafeArenaSwap(InboxMessage* other);
  void Swap(InboxMessage* other);

  // implements Message ----------------------------------------------

  inline InboxMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  InboxMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InboxMessage& from);
  void MergeFrom(const InboxMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InboxMessage* other);
  protected:
  explicit InboxMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id_seq = 1;
  void clear_node_id_seq();
  static const int kNodeIdSeqFieldNumber = 1;
  const ::std::string& node_id_seq() const;
  void set_node_id_seq(const ::std::string& value);
  void set_node_id_seq(const char* value);
  void set_node_id_seq(const char* value, size_t size);
  ::std::string* mutable_node_id_seq();
  ::std::string* release_node_id_seq();
  void set_allocated_node_id_seq(::std::string* node_id_seq);
  ::std::string* unsafe_arena_release_node_id_seq();
  void unsafe_arena_set_allocated_node_id_seq(
      ::std::string* node_id_seq);

  // string from_id = 2;
  void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  const ::std::string& from_id() const;
  void set_from_id(const ::std::string& value);
  void set_from_id(const char* value);
  void set_from_id(const char* value, size_t size);
  ::std::string* mutable_from_id();
  ::std::string* release_from_id();
  void set_allocated_from_id(::std::string* from_id);
  ::std::string* unsafe_arena_release_from_id();
  void unsafe_arena_set_allocated_from_id(
      ::std::string* from_id);

  // int32 message_type = 3;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 3;
  ::google::protobuf::int32 message_type() const;
  void set_message_type(::google::protobuf::int32 value);

  // string payload = 4;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);
  ::std::string* unsafe_arena_release_payload();
  void unsafe_arena_set_allocated_payload(
      ::std::string* payload);

  // int64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:allspark.InboxMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr node_id_seq_;
  ::google::protobuf::internal::ArenaStringPtr from_id_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 message_type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class ConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.ConfigRequest) */ {
 public:
  ConfigRequest();
  virtual ~ConfigRequest();

  ConfigRequest(const ConfigRequest& from);

  inline ConfigRequest& operator=(const ConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigRequest& default_instance();

  static inline const ConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ConfigRequest*>(
               &_ConfigRequest_default_instance_);
  }

  void UnsafeArenaSwap(ConfigRequest* other);
  void Swap(ConfigRequest* other);

  // implements Message ----------------------------------------------

  inline ConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigRequest& from);
  void MergeFrom(const ConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigRequest* other);
  protected:
  explicit ConfigRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string update_gcm_key = 1;
  void clear_update_gcm_key();
  static const int kUpdateGcmKeyFieldNumber = 1;
  const ::std::string& update_gcm_key() const;
  void set_update_gcm_key(const ::std::string& value);
  void set_update_gcm_key(const char* value);
  void set_update_gcm_key(const char* value, size_t size);
  ::std::string* mutable_update_gcm_key();
  ::std::string* release_update_gcm_key();
  void set_allocated_update_gcm_key(::std::string* update_gcm_key);
  ::std::string* unsafe_arena_release_update_gcm_key();
  void unsafe_arena_set_allocated_update_gcm_key(
      ::std::string* update_gcm_key);

  // bool fetch_inbox_messages = 2;
  void clear_fetch_inbox_messages();
  static const int kFetchInboxMessagesFieldNumber = 2;
  bool fetch_inbox_messages() const;
  void set_fetch_inbox_messages(bool value);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // int64 fetch_inbox_messages_from_seq = 4;
  void clear_fetch_inbox_messages_from_seq();
  static const int kFetchInboxMessagesFromSeqFieldNumber = 4;
  ::google::protobuf::int64 fetch_inbox_messages_from_seq() const;
  void set_fetch_inbox_messages_from_seq(::google::protobuf::int64 value);

  // int64 fetch_inbox_messages_to_seq = 5;
  void clear_fetch_inbox_messages_to_seq();
  static const int kFetchInboxMessagesToSeqFieldNumber = 5;
  ::google::protobuf::int64 fetch_inbox_messages_to_seq() const;
  void set_fetch_inbox_messages_to_seq(::google::protobuf::int64 value);

  // int64 fetch_inbox_messages_from_timestamp = 6;
  void clear_fetch_inbox_messages_from_timestamp();
  static const int kFetchInboxMessagesFromTimestampFieldNumber = 6;
  ::google::protobuf::int64 fetch_inbox_messages_from_timestamp() const;
  void set_fetch_inbox_messages_from_timestamp(::google::protobuf::int64 value);

  // int64 fetch_inbox_messages_to_timestamp = 7;
  void clear_fetch_inbox_messages_to_timestamp();
  static const int kFetchInboxMessagesToTimestampFieldNumber = 7;
  ::google::protobuf::int64 fetch_inbox_messages_to_timestamp() const;
  void set_fetch_inbox_messages_to_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:allspark.ConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr update_gcm_key_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 fetch_inbox_messages_from_seq_;
  ::google::protobuf::int64 fetch_inbox_messages_to_seq_;
  ::google::protobuf::int64 fetch_inbox_messages_from_timestamp_;
  ::google::protobuf::int64 fetch_inbox_messages_to_timestamp_;
  bool fetch_inbox_messages_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class ConfigResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.ConfigResponse) */ {
 public:
  ConfigResponse();
  virtual ~ConfigResponse();

  ConfigResponse(const ConfigResponse& from);

  inline ConfigResponse& operator=(const ConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigResponse& default_instance();

  static inline const ConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigResponse*>(
               &_ConfigResponse_default_instance_);
  }

  void UnsafeArenaSwap(ConfigResponse* other);
  void Swap(ConfigResponse* other);

  // implements Message ----------------------------------------------

  inline ConfigResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigResponse& from);
  void MergeFrom(const ConfigResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigResponse* other);
  protected:
  explicit ConfigResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .allspark.InboxMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::allspark::InboxMessage& messages(int index) const;
  ::allspark::InboxMessage* mutable_messages(int index);
  ::allspark::InboxMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >&
      messages() const;

  // int64 from_seq = 2;
  void clear_from_seq();
  static const int kFromSeqFieldNumber = 2;
  ::google::protobuf::int64 from_seq() const;
  void set_from_seq(::google::protobuf::int64 value);

  // int64 to_seq = 3;
  void clear_to_seq();
  static const int kToSeqFieldNumber = 3;
  ::google::protobuf::int64 to_seq() const;
  void set_to_seq(::google::protobuf::int64 value);

  // bool more = 4;
  void clear_more();
  static const int kMoreFieldNumber = 4;
  bool more() const;
  void set_more(bool value);

  // int64 user_time_stamp_diff = 5;
  void clear_user_time_stamp_diff();
  static const int kUserTimeStampDiffFieldNumber = 5;
  ::google::protobuf::int64 user_time_stamp_diff() const;
  void set_user_time_stamp_diff(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:allspark.ConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage > messages_;
  ::google::protobuf::int64 from_seq_;
  ::google::protobuf::int64 to_seq_;
  ::google::protobuf::int64 user_time_stamp_diff_;
  bool more_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class NodeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.NodeData) */ {
 public:
  NodeData();
  virtual ~NodeData();

  NodeData(const NodeData& from);

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeData& default_instance();

  static inline const NodeData* internal_default_instance() {
    return reinterpret_cast<const NodeData*>(
               &_NodeData_default_instance_);
  }

  void UnsafeArenaSwap(NodeData* other);
  void Swap(NodeData* other);

  // implements Message ----------------------------------------------

  inline NodeData* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeData* other);
  protected:
  explicit NodeData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host_address = 1;
  void clear_host_address();
  static const int kHostAddressFieldNumber = 1;
  const ::std::string& host_address() const;
  void set_host_address(const ::std::string& value);
  void set_host_address(const char* value);
  void set_host_address(const char* value, size_t size);
  ::std::string* mutable_host_address();
  ::std::string* release_host_address();
  void set_allocated_host_address(::std::string* host_address);
  ::std::string* unsafe_arena_release_host_address();
  void unsafe_arena_set_allocated_host_address(
      ::std::string* host_address);

  // string port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);
  ::std::string* unsafe_arena_release_port();
  void unsafe_arena_set_allocated_port(
      ::std::string* port);

  // bool is_ssl = 3;
  void clear_is_ssl();
  static const int kIsSslFieldNumber = 3;
  bool is_ssl() const;
  void set_is_ssl(bool value);

  // @@protoc_insertion_point(class_scope:allspark.NodeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr host_address_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  bool is_ssl_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class SessionNodeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.SessionNodeData) */ {
 public:
  SessionNodeData();
  virtual ~SessionNodeData();

  SessionNodeData(const SessionNodeData& from);

  inline SessionNodeData& operator=(const SessionNodeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionNodeData& default_instance();

  static inline const SessionNodeData* internal_default_instance() {
    return reinterpret_cast<const SessionNodeData*>(
               &_SessionNodeData_default_instance_);
  }

  void UnsafeArenaSwap(SessionNodeData* other);
  void Swap(SessionNodeData* other);

  // implements Message ----------------------------------------------

  inline SessionNodeData* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionNodeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionNodeData& from);
  void MergeFrom(const SessionNodeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionNodeData* other);
  protected:
  explicit SessionNodeData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_id = 1;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);
  ::std::string* unsafe_arena_release_node_id();
  void unsafe_arena_set_allocated_node_id(
      ::std::string* node_id);

  // bool is_anonymous = 2;
  void clear_is_anonymous();
  static const int kIsAnonymousFieldNumber = 2;
  bool is_anonymous() const;
  void set_is_anonymous(bool value);

  // @@protoc_insertion_point(class_scope:allspark.SessionNodeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  bool is_anonymous_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class SessionData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.SessionData) */ {
 public:
  SessionData();
  virtual ~SessionData();

  SessionData(const SessionData& from);

  inline SessionData& operator=(const SessionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionData& default_instance();

  static inline const SessionData* internal_default_instance() {
    return reinterpret_cast<const SessionData*>(
               &_SessionData_default_instance_);
  }

  void UnsafeArenaSwap(SessionData* other);
  void Swap(SessionData* other);

  // implements Message ----------------------------------------------

  inline SessionData* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionData& from);
  void MergeFrom(const SessionData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionData* other);
  protected:
  explicit SessionData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);
  ::std::string* unsafe_arena_release_session_id();
  void unsafe_arena_set_allocated_session_id(
      ::std::string* session_id);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);
  ::std::string* unsafe_arena_release_description();
  void unsafe_arena_set_allocated_description(
      ::std::string* description);

  // string node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);
  ::std::string* unsafe_arena_release_node_id();
  void unsafe_arena_set_allocated_node_id(
      ::std::string* node_id);

  // repeated .allspark.SessionNodeData session_nodes = 4;
  int session_nodes_size() const;
  void clear_session_nodes();
  static const int kSessionNodesFieldNumber = 4;
  const ::allspark::SessionNodeData& session_nodes(int index) const;
  ::allspark::SessionNodeData* mutable_session_nodes(int index);
  ::allspark::SessionNodeData* add_session_nodes();
  ::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData >*
      mutable_session_nodes();
  const ::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData >&
      session_nodes() const;

  // bool allow_anonymous = 5;
  void clear_allow_anonymous();
  static const int kAllowAnonymousFieldNumber = 5;
  bool allow_anonymous() const;
  void set_allow_anonymous(bool value);

  // @@protoc_insertion_point(class_scope:allspark.SessionData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData > session_nodes_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  bool allow_anonymous_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class SessionsList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.SessionsList) */ {
 public:
  SessionsList();
  virtual ~SessionsList();

  SessionsList(const SessionsList& from);

  inline SessionsList& operator=(const SessionsList& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionsList& default_instance();

  static inline const SessionsList* internal_default_instance() {
    return reinterpret_cast<const SessionsList*>(
               &_SessionsList_default_instance_);
  }

  void UnsafeArenaSwap(SessionsList* other);
  void Swap(SessionsList* other);

  // implements Message ----------------------------------------------

  inline SessionsList* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionsList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionsList& from);
  void MergeFrom(const SessionsList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionsList* other);
  protected:
  explicit SessionsList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .allspark.SessionData sessions = 1;
  int sessions_size() const;
  void clear_sessions();
  static const int kSessionsFieldNumber = 1;
  const ::allspark::SessionData& sessions(int index) const;
  ::allspark::SessionData* mutable_sessions(int index);
  ::allspark::SessionData* add_sessions();
  ::google::protobuf::RepeatedPtrField< ::allspark::SessionData >*
      mutable_sessions();
  const ::google::protobuf::RepeatedPtrField< ::allspark::SessionData >&
      sessions() const;

  // int32 from = 2;
  void clear_from();
  static const int kFromFieldNumber = 2;
  ::google::protobuf::int32 from() const;
  void set_from(::google::protobuf::int32 value);

  // int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:allspark.SessionsList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::allspark::SessionData > sessions_;
  ::google::protobuf::int32 from_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class NodesListData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.NodesListData) */ {
 public:
  NodesListData();
  virtual ~NodesListData();

  NodesListData(const NodesListData& from);

  inline NodesListData& operator=(const NodesListData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodesListData& default_instance();

  static inline const NodesListData* internal_default_instance() {
    return reinterpret_cast<const NodesListData*>(
               &_NodesListData_default_instance_);
  }

  void UnsafeArenaSwap(NodesListData* other);
  void Swap(NodesListData* other);

  // implements Message ----------------------------------------------

  inline NodesListData* New() const PROTOBUF_FINAL { return New(NULL); }

  NodesListData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodesListData& from);
  void MergeFrom(const NodesListData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodesListData* other);
  protected:
  explicit NodesListData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string node_id = 1;
  int node_id_size() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id(int index) const;
  ::std::string* mutable_node_id(int index);
  void set_node_id(int index, const ::std::string& value);
  void set_node_id(int index, const char* value);
  void set_node_id(int index, const char* value, size_t size);
  ::std::string* add_node_id();
  void add_node_id(const ::std::string& value);
  void add_node_id(const char* value);
  void add_node_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& node_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_node_id();

  // @@protoc_insertion_point(class_scope:allspark.NodesListData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> node_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class CreateSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.CreateSessionRequest) */ {
 public:
  CreateSessionRequest();
  virtual ~CreateSessionRequest();

  CreateSessionRequest(const CreateSessionRequest& from);

  inline CreateSessionRequest& operator=(const CreateSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSessionRequest& default_instance();

  static inline const CreateSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSessionRequest*>(
               &_CreateSessionRequest_default_instance_);
  }

  void UnsafeArenaSwap(CreateSessionRequest* other);
  void Swap(CreateSessionRequest* other);

  // implements Message ----------------------------------------------

  inline CreateSessionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateSessionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateSessionRequest& from);
  void MergeFrom(const CreateSessionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateSessionRequest* other);
  protected:
  explicit CreateSessionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_anonymous = 1;
  void clear_is_anonymous();
  static const int kIsAnonymousFieldNumber = 1;
  bool is_anonymous() const;
  void set_is_anonymous(bool value);

  // int32 who_can_add_session_nodes = 2;
  void clear_who_can_add_session_nodes();
  static const int kWhoCanAddSessionNodesFieldNumber = 2;
  ::google::protobuf::int32 who_can_add_session_nodes() const;
  void set_who_can_add_session_nodes(::google::protobuf::int32 value);

  // int32 notify_only_last_few_users = 3;
  void clear_notify_only_last_few_users();
  static const int kNotifyOnlyLastFewUsersFieldNumber = 3;
  ::google::protobuf::int32 notify_only_last_few_users() const;
  void set_notify_only_last_few_users(::google::protobuf::int32 value);

  // int32 session_type = 4;
  void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  ::google::protobuf::int32 session_type() const;
  void set_session_type(::google::protobuf::int32 value);

  // string session_game_master_node_id = 5;
  void clear_session_game_master_node_id();
  static const int kSessionGameMasterNodeIdFieldNumber = 5;
  const ::std::string& session_game_master_node_id() const;
  void set_session_game_master_node_id(const ::std::string& value);
  void set_session_game_master_node_id(const char* value);
  void set_session_game_master_node_id(const char* value, size_t size);
  ::std::string* mutable_session_game_master_node_id();
  ::std::string* release_session_game_master_node_id();
  void set_allocated_session_game_master_node_id(::std::string* session_game_master_node_id);
  ::std::string* unsafe_arena_release_session_game_master_node_id();
  void unsafe_arena_set_allocated_session_game_master_node_id(
      ::std::string* session_game_master_node_id);

  // string session_description = 6;
  void clear_session_description();
  static const int kSessionDescriptionFieldNumber = 6;
  const ::std::string& session_description() const;
  void set_session_description(const ::std::string& value);
  void set_session_description(const char* value);
  void set_session_description(const char* value, size_t size);
  ::std::string* mutable_session_description();
  ::std::string* release_session_description();
  void set_allocated_session_description(::std::string* session_description);
  ::std::string* unsafe_arena_release_session_description();
  void unsafe_arena_set_allocated_session_description(
      ::std::string* session_description);

  // bool allow_anonymous = 7;
  void clear_allow_anonymous();
  static const int kAllowAnonymousFieldNumber = 7;
  bool allow_anonymous() const;
  void set_allow_anonymous(bool value);

  // @@protoc_insertion_point(class_scope:allspark.CreateSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr session_game_master_node_id_;
  ::google::protobuf::internal::ArenaStringPtr session_description_;
  ::google::protobuf::int32 who_can_add_session_nodes_;
  ::google::protobuf::int32 notify_only_last_few_users_;
  ::google::protobuf::int32 session_type_;
  bool is_anonymous_;
  bool allow_anonymous_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class JoinSessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.JoinSessionRequest) */ {
 public:
  JoinSessionRequest();
  virtual ~JoinSessionRequest();

  JoinSessionRequest(const JoinSessionRequest& from);

  inline JoinSessionRequest& operator=(const JoinSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinSessionRequest& default_instance();

  static inline const JoinSessionRequest* internal_default_instance() {
    return reinterpret_cast<const JoinSessionRequest*>(
               &_JoinSessionRequest_default_instance_);
  }

  void UnsafeArenaSwap(JoinSessionRequest* other);
  void Swap(JoinSessionRequest* other);

  // implements Message ----------------------------------------------

  inline JoinSessionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinSessionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinSessionRequest& from);
  void MergeFrom(const JoinSessionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinSessionRequest* other);
  protected:
  explicit JoinSessionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_anonymous = 1;
  void clear_is_anonymous();
  static const int kIsAnonymousFieldNumber = 1;
  bool is_anonymous() const;
  void set_is_anonymous(bool value);

  // string session_id = 2;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);
  ::std::string* unsafe_arena_release_session_id();
  void unsafe_arena_set_allocated_session_id(
      ::std::string* session_id);

  // string node_id = 3;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);
  ::std::string* unsafe_arena_release_node_id();
  void unsafe_arena_set_allocated_node_id(
      ::std::string* node_id);

  // @@protoc_insertion_point(class_scope:allspark.JoinSessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  bool is_anonymous_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class GetInboxMessagesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.GetInboxMessagesRequest) */ {
 public:
  GetInboxMessagesRequest();
  virtual ~GetInboxMessagesRequest();

  GetInboxMessagesRequest(const GetInboxMessagesRequest& from);

  inline GetInboxMessagesRequest& operator=(const GetInboxMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInboxMessagesRequest& default_instance();

  static inline const GetInboxMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetInboxMessagesRequest*>(
               &_GetInboxMessagesRequest_default_instance_);
  }

  void UnsafeArenaSwap(GetInboxMessagesRequest* other);
  void Swap(GetInboxMessagesRequest* other);

  // implements Message ----------------------------------------------

  inline GetInboxMessagesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInboxMessagesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInboxMessagesRequest& from);
  void MergeFrom(const GetInboxMessagesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInboxMessagesRequest* other);
  protected:
  explicit GetInboxMessagesRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string session_id = 1;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 1;
  const ::std::string& session_id() const;
  void set_session_id(const ::std::string& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  ::std::string* mutable_session_id();
  ::std::string* release_session_id();
  void set_allocated_session_id(::std::string* session_id);
  ::std::string* unsafe_arena_release_session_id();
  void unsafe_arena_set_allocated_session_id(
      ::std::string* session_id);

  // string node_id = 6;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 6;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);
  ::std::string* unsafe_arena_release_node_id();
  void unsafe_arena_set_allocated_node_id(
      ::std::string* node_id);

  // int32 from_seq = 2;
  void clear_from_seq();
  static const int kFromSeqFieldNumber = 2;
  ::google::protobuf::int32 from_seq() const;
  void set_from_seq(::google::protobuf::int32 value);

  // int32 to_seq = 3;
  void clear_to_seq();
  static const int kToSeqFieldNumber = 3;
  ::google::protobuf::int32 to_seq() const;
  void set_to_seq(::google::protobuf::int32 value);

  // int64 from_timestamp = 4;
  void clear_from_timestamp();
  static const int kFromTimestampFieldNumber = 4;
  ::google::protobuf::int64 from_timestamp() const;
  void set_from_timestamp(::google::protobuf::int64 value);

  // int64 to_timestamp = 5;
  void clear_to_timestamp();
  static const int kToTimestampFieldNumber = 5;
  ::google::protobuf::int64 to_timestamp() const;
  void set_to_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:allspark.GetInboxMessagesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr session_id_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::int32 from_seq_;
  ::google::protobuf::int32 to_seq_;
  ::google::protobuf::int64 from_timestamp_;
  ::google::protobuf::int64 to_timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class InboxMessagesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.InboxMessagesResponse) */ {
 public:
  InboxMessagesResponse();
  virtual ~InboxMessagesResponse();

  InboxMessagesResponse(const InboxMessagesResponse& from);

  inline InboxMessagesResponse& operator=(const InboxMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const InboxMessagesResponse& default_instance();

  static inline const InboxMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const InboxMessagesResponse*>(
               &_InboxMessagesResponse_default_instance_);
  }

  void UnsafeArenaSwap(InboxMessagesResponse* other);
  void Swap(InboxMessagesResponse* other);

  // implements Message ----------------------------------------------

  inline InboxMessagesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InboxMessagesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InboxMessagesResponse& from);
  void MergeFrom(const InboxMessagesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InboxMessagesResponse* other);
  protected:
  explicit InboxMessagesResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .allspark.InboxMessage inbox_messages = 1;
  int inbox_messages_size() const;
  void clear_inbox_messages();
  static const int kInboxMessagesFieldNumber = 1;
  const ::allspark::InboxMessage& inbox_messages(int index) const;
  ::allspark::InboxMessage* mutable_inbox_messages(int index);
  ::allspark::InboxMessage* add_inbox_messages();
  ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >*
      mutable_inbox_messages();
  const ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >&
      inbox_messages() const;

  // int64 from_seq = 2;
  void clear_from_seq();
  static const int kFromSeqFieldNumber = 2;
  ::google::protobuf::int64 from_seq() const;
  void set_from_seq(::google::protobuf::int64 value);

  // int64 to_seq = 3;
  void clear_to_seq();
  static const int kToSeqFieldNumber = 3;
  ::google::protobuf::int64 to_seq() const;
  void set_to_seq(::google::protobuf::int64 value);

  // bool more = 4;
  void clear_more();
  static const int kMoreFieldNumber = 4;
  bool more() const;
  void set_more(bool value);

  // @@protoc_insertion_point(class_scope:allspark.InboxMessagesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage > inbox_messages_;
  ::google::protobuf::int64 from_seq_;
  ::google::protobuf::int64 to_seq_;
  bool more_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class BooleanData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.BooleanData) */ {
 public:
  BooleanData();
  virtual ~BooleanData();

  BooleanData(const BooleanData& from);

  inline BooleanData& operator=(const BooleanData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BooleanData& default_instance();

  static inline const BooleanData* internal_default_instance() {
    return reinterpret_cast<const BooleanData*>(
               &_BooleanData_default_instance_);
  }

  void UnsafeArenaSwap(BooleanData* other);
  void Swap(BooleanData* other);

  // implements Message ----------------------------------------------

  inline BooleanData* New() const PROTOBUF_FINAL { return New(NULL); }

  BooleanData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BooleanData& from);
  void MergeFrom(const BooleanData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BooleanData* other);
  protected:
  explicit BooleanData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:allspark.BooleanData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class StringData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.StringData) */ {
 public:
  StringData();
  virtual ~StringData();

  StringData(const StringData& from);

  inline StringData& operator=(const StringData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringData& default_instance();

  static inline const StringData* internal_default_instance() {
    return reinterpret_cast<const StringData*>(
               &_StringData_default_instance_);
  }

  void UnsafeArenaSwap(StringData* other);
  void Swap(StringData* other);

  // implements Message ----------------------------------------------

  inline StringData* New() const PROTOBUF_FINAL { return New(NULL); }

  StringData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StringData& from);
  void MergeFrom(const StringData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StringData* other);
  protected:
  explicit StringData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);
  ::std::string* unsafe_arena_release_value();
  void unsafe_arena_set_allocated_value(
      ::std::string* value);

  // @@protoc_insertion_point(class_scope:allspark.StringData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// -------------------------------------------------------------------

class EmptyData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allspark.EmptyData) */ {
 public:
  EmptyData();
  virtual ~EmptyData();

  EmptyData(const EmptyData& from);

  inline EmptyData& operator=(const EmptyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyData& default_instance();

  static inline const EmptyData* internal_default_instance() {
    return reinterpret_cast<const EmptyData*>(
               &_EmptyData_default_instance_);
  }

  void UnsafeArenaSwap(EmptyData* other);
  void Swap(EmptyData* other);

  // implements Message ----------------------------------------------

  inline EmptyData* New() const PROTOBUF_FINAL { return New(NULL); }

  EmptyData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EmptyData& from);
  void MergeFrom(const EmptyData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EmptyData* other);
  protected:
  explicit EmptyData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:allspark.EmptyData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_wire_5ftransfers_2eproto_impl();
  friend void  protobuf_AddDesc_wire_5ftransfers_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_wire_5ftransfers_2eproto();
  friend void protobuf_ShutdownFile_wire_5ftransfers_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AuthData

// string node_id = 1;
inline void AuthData::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AuthData::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.AuthData.node_id)
  return node_id_.Get();
}
inline void AuthData::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.AuthData.node_id)
}
inline void AuthData::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.AuthData.node_id)
}
inline void AuthData::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.AuthData.node_id)
}
inline ::std::string* AuthData::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.AuthData.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AuthData::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.AuthData.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AuthData::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.AuthData.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AuthData::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.AuthData.node_id)
}
inline void AuthData::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.AuthData.node_id)
}

// int32 client_type = 2;
inline void AuthData::clear_client_type() {
  client_type_ = 0;
}
inline ::google::protobuf::int32 AuthData::client_type() const {
  // @@protoc_insertion_point(field_get:allspark.AuthData.client_type)
  return client_type_;
}
inline void AuthData::set_client_type(::google::protobuf::int32 value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:allspark.AuthData.client_type)
}

// -------------------------------------------------------------------

// Message

// string dest_id = 1;
inline void Message::clear_dest_id() {
  dest_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::dest_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.dest_id)
  return dest_id_.Get();
}
inline void Message::set_dest_id(const ::std::string& value) {
  
  dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.dest_id)
}
inline void Message::set_dest_id(const char* value) {
  
  dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.dest_id)
}
inline void Message::set_dest_id(const char* value,
    size_t size) {
  
  dest_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.dest_id)
}
inline ::std::string* Message::mutable_dest_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.dest_id)
  return dest_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_dest_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.dest_id)
  
  return dest_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_dest_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.dest_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dest_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_dest_id(::std::string* dest_id) {
  if (dest_id != NULL) {
    
  } else {
    
  }
  dest_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.dest_id)
}
inline void Message::unsafe_arena_set_allocated_dest_id(
    ::std::string* dest_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dest_id != NULL) {
    
  } else {
    
  }
  dest_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dest_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.dest_id)
}

// string src_id = 2;
inline void Message::clear_src_id() {
  src_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::src_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.src_id)
  return src_id_.Get();
}
inline void Message::set_src_id(const ::std::string& value) {
  
  src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.src_id)
}
inline void Message::set_src_id(const char* value) {
  
  src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.src_id)
}
inline void Message::set_src_id(const char* value,
    size_t size) {
  
  src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.src_id)
}
inline ::std::string* Message::mutable_src_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.src_id)
  return src_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_src_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.src_id)
  
  return src_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_src_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.src_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return src_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_src_id(::std::string* src_id) {
  if (src_id != NULL) {
    
  } else {
    
  }
  src_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.src_id)
}
inline void Message::unsafe_arena_set_allocated_src_id(
    ::std::string* src_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (src_id != NULL) {
    
  } else {
    
  }
  src_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      src_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.src_id)
}

// string dest_session_id = 3;
inline void Message::clear_dest_session_id() {
  dest_session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::dest_session_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.dest_session_id)
  return dest_session_id_.Get();
}
inline void Message::set_dest_session_id(const ::std::string& value) {
  
  dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.dest_session_id)
}
inline void Message::set_dest_session_id(const char* value) {
  
  dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.dest_session_id)
}
inline void Message::set_dest_session_id(const char* value,
    size_t size) {
  
  dest_session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.dest_session_id)
}
inline ::std::string* Message::mutable_dest_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.dest_session_id)
  return dest_session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_dest_session_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.dest_session_id)
  
  return dest_session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_dest_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.dest_session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dest_session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_dest_session_id(::std::string* dest_session_id) {
  if (dest_session_id != NULL) {
    
  } else {
    
  }
  dest_session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.dest_session_id)
}
inline void Message::unsafe_arena_set_allocated_dest_session_id(
    ::std::string* dest_session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dest_session_id != NULL) {
    
  } else {
    
  }
  dest_session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dest_session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.dest_session_id)
}

// int32 type = 4;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Message::type() const {
  // @@protoc_insertion_point(field_get:allspark.Message.type)
  return type_;
}
inline void Message::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.type)
}

// bytes payload = 5;
inline void Message::clear_payload() {
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:allspark.Message.payload)
  return payload_.Get();
}
inline void Message::set_payload(const ::std::string& value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.payload)
}
inline void Message::set_payload(const char* value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.payload)
}
inline void Message::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.payload)
}
inline ::std::string* Message::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.payload)
  return payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_payload() {
  // @@protoc_insertion_point(field_release:allspark.Message.payload)
  
  return payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.payload)
}
inline void Message::unsafe_arena_set_allocated_payload(
    ::std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.payload)
}

// bytes payload1 = 6;
inline void Message::clear_payload1() {
  payload1_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::payload1() const {
  // @@protoc_insertion_point(field_get:allspark.Message.payload1)
  return payload1_.Get();
}
inline void Message::set_payload1(const ::std::string& value) {
  
  payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.payload1)
}
inline void Message::set_payload1(const char* value) {
  
  payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.payload1)
}
inline void Message::set_payload1(const void* value,
    size_t size) {
  
  payload1_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.payload1)
}
inline ::std::string* Message::mutable_payload1() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.payload1)
  return payload1_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_payload1() {
  // @@protoc_insertion_point(field_release:allspark.Message.payload1)
  
  return payload1_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_payload1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.payload1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload1_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_payload1(::std::string* payload1) {
  if (payload1 != NULL) {
    
  } else {
    
  }
  payload1_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.payload1)
}
inline void Message::unsafe_arena_set_allocated_payload1(
    ::std::string* payload1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload1 != NULL) {
    
  } else {
    
  }
  payload1_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.payload1)
}

// bytes payload2 = 7;
inline void Message::clear_payload2() {
  payload2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::payload2() const {
  // @@protoc_insertion_point(field_get:allspark.Message.payload2)
  return payload2_.Get();
}
inline void Message::set_payload2(const ::std::string& value) {
  
  payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.payload2)
}
inline void Message::set_payload2(const char* value) {
  
  payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.payload2)
}
inline void Message::set_payload2(const void* value,
    size_t size) {
  
  payload2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.payload2)
}
inline ::std::string* Message::mutable_payload2() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.payload2)
  return payload2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_payload2() {
  // @@protoc_insertion_point(field_release:allspark.Message.payload2)
  
  return payload2_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_payload2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.payload2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_payload2(::std::string* payload2) {
  if (payload2 != NULL) {
    
  } else {
    
  }
  payload2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.payload2)
}
inline void Message::unsafe_arena_set_allocated_payload2(
    ::std::string* payload2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload2 != NULL) {
    
  } else {
    
  }
  payload2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.payload2)
}

// string id = 8;
inline void Message::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.id)
  return id_.Get();
}
inline void Message::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.id)
}
inline void Message::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.id)
}
inline void Message::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.id)
}
inline ::std::string* Message::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.id)
}
inline void Message::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.id)
}

// bool is_ack_required = 9;
inline void Message::clear_is_ack_required() {
  is_ack_required_ = false;
}
inline bool Message::is_ack_required() const {
  // @@protoc_insertion_point(field_get:allspark.Message.is_ack_required)
  return is_ack_required_;
}
inline void Message::set_is_ack_required(bool value) {
  
  is_ack_required_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.is_ack_required)
}

// bool is_anonymize_src_id = 10;
inline void Message::clear_is_anonymize_src_id() {
  is_anonymize_src_id_ = false;
}
inline bool Message::is_anonymize_src_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.is_anonymize_src_id)
  return is_anonymize_src_id_;
}
inline void Message::set_is_anonymize_src_id(bool value) {
  
  is_anonymize_src_id_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.is_anonymize_src_id)
}

// string anonymize_src_id = 11;
inline void Message::clear_anonymize_src_id() {
  anonymize_src_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::anonymize_src_id() const {
  // @@protoc_insertion_point(field_get:allspark.Message.anonymize_src_id)
  return anonymize_src_id_.Get();
}
inline void Message::set_anonymize_src_id(const ::std::string& value) {
  
  anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.anonymize_src_id)
}
inline void Message::set_anonymize_src_id(const char* value) {
  
  anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.anonymize_src_id)
}
inline void Message::set_anonymize_src_id(const char* value,
    size_t size) {
  
  anonymize_src_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.anonymize_src_id)
}
inline ::std::string* Message::mutable_anonymize_src_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.anonymize_src_id)
  return anonymize_src_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_anonymize_src_id() {
  // @@protoc_insertion_point(field_release:allspark.Message.anonymize_src_id)
  
  return anonymize_src_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_anonymize_src_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.anonymize_src_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return anonymize_src_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_anonymize_src_id(::std::string* anonymize_src_id) {
  if (anonymize_src_id != NULL) {
    
  } else {
    
  }
  anonymize_src_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anonymize_src_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.anonymize_src_id)
}
inline void Message::unsafe_arena_set_allocated_anonymize_src_id(
    ::std::string* anonymize_src_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (anonymize_src_id != NULL) {
    
  } else {
    
  }
  anonymize_src_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      anonymize_src_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.anonymize_src_id)
}

// int64 timestamp = 12;
inline void Message::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Message::timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.Message.timestamp)
  return timestamp_;
}
inline void Message::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.Message.timestamp)
}

// bytes raw_data = 13;
inline void Message::clear_raw_data() {
  raw_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Message::raw_data() const {
  // @@protoc_insertion_point(field_get:allspark.Message.raw_data)
  return raw_data_.Get();
}
inline void Message::set_raw_data(const ::std::string& value) {
  
  raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.Message.raw_data)
}
inline void Message::set_raw_data(const char* value) {
  
  raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.Message.raw_data)
}
inline void Message::set_raw_data(const void* value,
    size_t size) {
  
  raw_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.Message.raw_data)
}
inline ::std::string* Message::mutable_raw_data() {
  
  // @@protoc_insertion_point(field_mutable:allspark.Message.raw_data)
  return raw_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::release_raw_data() {
  // @@protoc_insertion_point(field_release:allspark.Message.raw_data)
  
  return raw_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Message::unsafe_arena_release_raw_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.Message.raw_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return raw_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Message::set_allocated_raw_data(::std::string* raw_data) {
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.Message.raw_data)
}
inline void Message::unsafe_arena_set_allocated_raw_data(
    ::std::string* raw_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (raw_data != NULL) {
    
  } else {
    
  }
  raw_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      raw_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.Message.raw_data)
}

// -------------------------------------------------------------------

// InboxMessage

// string node_id_seq = 1;
inline void InboxMessage::clear_node_id_seq() {
  node_id_seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& InboxMessage::node_id_seq() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.node_id_seq)
  return node_id_seq_.Get();
}
inline void InboxMessage::set_node_id_seq(const ::std::string& value) {
  
  node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.node_id_seq)
}
inline void InboxMessage::set_node_id_seq(const char* value) {
  
  node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.InboxMessage.node_id_seq)
}
inline void InboxMessage::set_node_id_seq(const char* value,
    size_t size) {
  
  node_id_seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.InboxMessage.node_id_seq)
}
inline ::std::string* InboxMessage::mutable_node_id_seq() {
  
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessage.node_id_seq)
  return node_id_seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InboxMessage::release_node_id_seq() {
  // @@protoc_insertion_point(field_release:allspark.InboxMessage.node_id_seq)
  
  return node_id_seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InboxMessage::unsafe_arena_release_node_id_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.InboxMessage.node_id_seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void InboxMessage::set_allocated_node_id_seq(::std::string* node_id_seq) {
  if (node_id_seq != NULL) {
    
  } else {
    
  }
  node_id_seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id_seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.InboxMessage.node_id_seq)
}
inline void InboxMessage::unsafe_arena_set_allocated_node_id_seq(
    ::std::string* node_id_seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id_seq != NULL) {
    
  } else {
    
  }
  node_id_seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id_seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.InboxMessage.node_id_seq)
}

// string from_id = 2;
inline void InboxMessage::clear_from_id() {
  from_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& InboxMessage::from_id() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.from_id)
  return from_id_.Get();
}
inline void InboxMessage::set_from_id(const ::std::string& value) {
  
  from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.from_id)
}
inline void InboxMessage::set_from_id(const char* value) {
  
  from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.InboxMessage.from_id)
}
inline void InboxMessage::set_from_id(const char* value,
    size_t size) {
  
  from_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.InboxMessage.from_id)
}
inline ::std::string* InboxMessage::mutable_from_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessage.from_id)
  return from_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InboxMessage::release_from_id() {
  // @@protoc_insertion_point(field_release:allspark.InboxMessage.from_id)
  
  return from_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InboxMessage::unsafe_arena_release_from_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.InboxMessage.from_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return from_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void InboxMessage::set_allocated_from_id(::std::string* from_id) {
  if (from_id != NULL) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.InboxMessage.from_id)
}
inline void InboxMessage::unsafe_arena_set_allocated_from_id(
    ::std::string* from_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (from_id != NULL) {
    
  } else {
    
  }
  from_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      from_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.InboxMessage.from_id)
}

// int32 message_type = 3;
inline void InboxMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::google::protobuf::int32 InboxMessage::message_type() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.message_type)
  return message_type_;
}
inline void InboxMessage::set_message_type(::google::protobuf::int32 value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.message_type)
}

// string payload = 4;
inline void InboxMessage::clear_payload() {
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& InboxMessage::payload() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.payload)
  return payload_.Get();
}
inline void InboxMessage::set_payload(const ::std::string& value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.payload)
}
inline void InboxMessage::set_payload(const char* value) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.InboxMessage.payload)
}
inline void InboxMessage::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.InboxMessage.payload)
}
inline ::std::string* InboxMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessage.payload)
  return payload_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InboxMessage::release_payload() {
  // @@protoc_insertion_point(field_release:allspark.InboxMessage.payload)
  
  return payload_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* InboxMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.InboxMessage.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return payload_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void InboxMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.InboxMessage.payload)
}
inline void InboxMessage::unsafe_arena_set_allocated_payload(
    ::std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.InboxMessage.payload)
}

// int64 timestamp = 5;
inline void InboxMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InboxMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessage.timestamp)
  return timestamp_;
}
inline void InboxMessage::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessage.timestamp)
}

// -------------------------------------------------------------------

// ConfigRequest

// string update_gcm_key = 1;
inline void ConfigRequest::clear_update_gcm_key() {
  update_gcm_key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ConfigRequest::update_gcm_key() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.update_gcm_key)
  return update_gcm_key_.Get();
}
inline void ConfigRequest::set_update_gcm_key(const ::std::string& value) {
  
  update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.update_gcm_key)
}
inline void ConfigRequest::set_update_gcm_key(const char* value) {
  
  update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.ConfigRequest.update_gcm_key)
}
inline void ConfigRequest::set_update_gcm_key(const char* value,
    size_t size) {
  
  update_gcm_key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.ConfigRequest.update_gcm_key)
}
inline ::std::string* ConfigRequest::mutable_update_gcm_key() {
  
  // @@protoc_insertion_point(field_mutable:allspark.ConfigRequest.update_gcm_key)
  return update_gcm_key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRequest::release_update_gcm_key() {
  // @@protoc_insertion_point(field_release:allspark.ConfigRequest.update_gcm_key)
  
  return update_gcm_key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ConfigRequest::unsafe_arena_release_update_gcm_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.ConfigRequest.update_gcm_key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return update_gcm_key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ConfigRequest::set_allocated_update_gcm_key(::std::string* update_gcm_key) {
  if (update_gcm_key != NULL) {
    
  } else {
    
  }
  update_gcm_key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_gcm_key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.ConfigRequest.update_gcm_key)
}
inline void ConfigRequest::unsafe_arena_set_allocated_update_gcm_key(
    ::std::string* update_gcm_key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (update_gcm_key != NULL) {
    
  } else {
    
  }
  update_gcm_key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      update_gcm_key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.ConfigRequest.update_gcm_key)
}

// bool fetch_inbox_messages = 2;
inline void ConfigRequest::clear_fetch_inbox_messages() {
  fetch_inbox_messages_ = false;
}
inline bool ConfigRequest::fetch_inbox_messages() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages)
  return fetch_inbox_messages_;
}
inline void ConfigRequest::set_fetch_inbox_messages(bool value) {
  
  fetch_inbox_messages_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages)
}

// int64 timestamp = 3;
inline void ConfigRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.timestamp)
  return timestamp_;
}
inline void ConfigRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.timestamp)
}

// int64 fetch_inbox_messages_from_seq = 4;
inline void ConfigRequest::clear_fetch_inbox_messages_from_seq() {
  fetch_inbox_messages_from_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_from_seq)
  return fetch_inbox_messages_from_seq_;
}
inline void ConfigRequest::set_fetch_inbox_messages_from_seq(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_from_seq)
}

// int64 fetch_inbox_messages_to_seq = 5;
inline void ConfigRequest::clear_fetch_inbox_messages_to_seq() {
  fetch_inbox_messages_to_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_to_seq)
  return fetch_inbox_messages_to_seq_;
}
inline void ConfigRequest::set_fetch_inbox_messages_to_seq(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_to_seq)
}

// int64 fetch_inbox_messages_from_timestamp = 6;
inline void ConfigRequest::clear_fetch_inbox_messages_from_timestamp() {
  fetch_inbox_messages_from_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_from_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_from_timestamp)
  return fetch_inbox_messages_from_timestamp_;
}
inline void ConfigRequest::set_fetch_inbox_messages_from_timestamp(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_from_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_from_timestamp)
}

// int64 fetch_inbox_messages_to_timestamp = 7;
inline void ConfigRequest::clear_fetch_inbox_messages_to_timestamp() {
  fetch_inbox_messages_to_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigRequest::fetch_inbox_messages_to_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigRequest.fetch_inbox_messages_to_timestamp)
  return fetch_inbox_messages_to_timestamp_;
}
inline void ConfigRequest::set_fetch_inbox_messages_to_timestamp(::google::protobuf::int64 value) {
  
  fetch_inbox_messages_to_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigRequest.fetch_inbox_messages_to_timestamp)
}

// -------------------------------------------------------------------

// ConfigResponse

// repeated .allspark.InboxMessage messages = 1;
inline int ConfigResponse::messages_size() const {
  return messages_.size();
}
inline void ConfigResponse::clear_messages() {
  messages_.Clear();
}
inline const ::allspark::InboxMessage& ConfigResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.messages)
  return messages_.Get(index);
}
inline ::allspark::InboxMessage* ConfigResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.ConfigResponse.messages)
  return messages_.Mutable(index);
}
inline ::allspark::InboxMessage* ConfigResponse::add_messages() {
  // @@protoc_insertion_point(field_add:allspark.ConfigResponse.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >*
ConfigResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:allspark.ConfigResponse.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >&
ConfigResponse::messages() const {
  // @@protoc_insertion_point(field_list:allspark.ConfigResponse.messages)
  return messages_;
}

// int64 from_seq = 2;
inline void ConfigResponse::clear_from_seq() {
  from_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigResponse::from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.from_seq)
  return from_seq_;
}
inline void ConfigResponse::set_from_seq(::google::protobuf::int64 value) {
  
  from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.from_seq)
}

// int64 to_seq = 3;
inline void ConfigResponse::clear_to_seq() {
  to_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigResponse::to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.to_seq)
  return to_seq_;
}
inline void ConfigResponse::set_to_seq(::google::protobuf::int64 value) {
  
  to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.to_seq)
}

// bool more = 4;
inline void ConfigResponse::clear_more() {
  more_ = false;
}
inline bool ConfigResponse::more() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.more)
  return more_;
}
inline void ConfigResponse::set_more(bool value) {
  
  more_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.more)
}

// int64 user_time_stamp_diff = 5;
inline void ConfigResponse::clear_user_time_stamp_diff() {
  user_time_stamp_diff_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigResponse::user_time_stamp_diff() const {
  // @@protoc_insertion_point(field_get:allspark.ConfigResponse.user_time_stamp_diff)
  return user_time_stamp_diff_;
}
inline void ConfigResponse::set_user_time_stamp_diff(::google::protobuf::int64 value) {
  
  user_time_stamp_diff_ = value;
  // @@protoc_insertion_point(field_set:allspark.ConfigResponse.user_time_stamp_diff)
}

// -------------------------------------------------------------------

// NodeData

// string host_address = 1;
inline void NodeData::clear_host_address() {
  host_address_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NodeData::host_address() const {
  // @@protoc_insertion_point(field_get:allspark.NodeData.host_address)
  return host_address_.Get();
}
inline void NodeData::set_host_address(const ::std::string& value) {
  
  host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.NodeData.host_address)
}
inline void NodeData::set_host_address(const char* value) {
  
  host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.NodeData.host_address)
}
inline void NodeData::set_host_address(const char* value,
    size_t size) {
  
  host_address_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.NodeData.host_address)
}
inline ::std::string* NodeData::mutable_host_address() {
  
  // @@protoc_insertion_point(field_mutable:allspark.NodeData.host_address)
  return host_address_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NodeData::release_host_address() {
  // @@protoc_insertion_point(field_release:allspark.NodeData.host_address)
  
  return host_address_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NodeData::unsafe_arena_release_host_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.NodeData.host_address)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return host_address_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NodeData::set_allocated_host_address(::std::string* host_address) {
  if (host_address != NULL) {
    
  } else {
    
  }
  host_address_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_address,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.NodeData.host_address)
}
inline void NodeData::unsafe_arena_set_allocated_host_address(
    ::std::string* host_address) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (host_address != NULL) {
    
  } else {
    
  }
  host_address_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      host_address, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.NodeData.host_address)
}

// string port = 2;
inline void NodeData::clear_port() {
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NodeData::port() const {
  // @@protoc_insertion_point(field_get:allspark.NodeData.port)
  return port_.Get();
}
inline void NodeData::set_port(const ::std::string& value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.NodeData.port)
}
inline void NodeData::set_port(const char* value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.NodeData.port)
}
inline void NodeData::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.NodeData.port)
}
inline ::std::string* NodeData::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:allspark.NodeData.port)
  return port_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NodeData::release_port() {
  // @@protoc_insertion_point(field_release:allspark.NodeData.port)
  
  return port_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NodeData::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.NodeData.port)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return port_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NodeData::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.NodeData.port)
}
inline void NodeData::unsafe_arena_set_allocated_port(
    ::std::string* port) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port != NULL) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.NodeData.port)
}

// bool is_ssl = 3;
inline void NodeData::clear_is_ssl() {
  is_ssl_ = false;
}
inline bool NodeData::is_ssl() const {
  // @@protoc_insertion_point(field_get:allspark.NodeData.is_ssl)
  return is_ssl_;
}
inline void NodeData::set_is_ssl(bool value) {
  
  is_ssl_ = value;
  // @@protoc_insertion_point(field_set:allspark.NodeData.is_ssl)
}

// -------------------------------------------------------------------

// SessionNodeData

// string node_id = 1;
inline void SessionNodeData::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionNodeData::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.SessionNodeData.node_id)
  return node_id_.Get();
}
inline void SessionNodeData::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionNodeData.node_id)
}
inline void SessionNodeData::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionNodeData.node_id)
}
inline void SessionNodeData::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionNodeData.node_id)
}
inline ::std::string* SessionNodeData::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionNodeData.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionNodeData::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.SessionNodeData.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionNodeData::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionNodeData.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionNodeData::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionNodeData.node_id)
}
inline void SessionNodeData::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionNodeData.node_id)
}

// bool is_anonymous = 2;
inline void SessionNodeData::clear_is_anonymous() {
  is_anonymous_ = false;
}
inline bool SessionNodeData::is_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.SessionNodeData.is_anonymous)
  return is_anonymous_;
}
inline void SessionNodeData::set_is_anonymous(bool value) {
  
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionNodeData.is_anonymous)
}

// -------------------------------------------------------------------

// SessionData

// string session_id = 1;
inline void SessionData::clear_session_id() {
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionData::session_id() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.session_id)
  return session_id_.Get();
}
inline void SessionData::set_session_id(const ::std::string& value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionData.session_id)
}
inline void SessionData::set_session_id(const char* value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionData.session_id)
}
inline void SessionData::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionData.session_id)
}
inline ::std::string* SessionData::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.session_id)
  return session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionData::release_session_id() {
  // @@protoc_insertion_point(field_release:allspark.SessionData.session_id)
  
  return session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionData::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionData.session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionData::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionData.session_id)
}
inline void SessionData::unsafe_arena_set_allocated_session_id(
    ::std::string* session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionData.session_id)
}

// string description = 2;
inline void SessionData::clear_description() {
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionData::description() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.description)
  return description_.Get();
}
inline void SessionData::set_description(const ::std::string& value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionData.description)
}
inline void SessionData::set_description(const char* value) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionData.description)
}
inline void SessionData::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionData.description)
}
inline ::std::string* SessionData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.description)
  return description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionData::release_description() {
  // @@protoc_insertion_point(field_release:allspark.SessionData.description)
  
  return description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionData::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionData.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionData.description)
}
inline void SessionData::unsafe_arena_set_allocated_description(
    ::std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (description != NULL) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionData.description)
}

// string node_id = 3;
inline void SessionData::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SessionData::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.node_id)
  return node_id_.Get();
}
inline void SessionData::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.SessionData.node_id)
}
inline void SessionData::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.SessionData.node_id)
}
inline void SessionData::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.SessionData.node_id)
}
inline ::std::string* SessionData::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionData::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.SessionData.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SessionData::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.SessionData.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SessionData::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.SessionData.node_id)
}
inline void SessionData::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.SessionData.node_id)
}

// repeated .allspark.SessionNodeData session_nodes = 4;
inline int SessionData::session_nodes_size() const {
  return session_nodes_.size();
}
inline void SessionData::clear_session_nodes() {
  session_nodes_.Clear();
}
inline const ::allspark::SessionNodeData& SessionData::session_nodes(int index) const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.session_nodes)
  return session_nodes_.Get(index);
}
inline ::allspark::SessionNodeData* SessionData::mutable_session_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.SessionData.session_nodes)
  return session_nodes_.Mutable(index);
}
inline ::allspark::SessionNodeData* SessionData::add_session_nodes() {
  // @@protoc_insertion_point(field_add:allspark.SessionData.session_nodes)
  return session_nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData >*
SessionData::mutable_session_nodes() {
  // @@protoc_insertion_point(field_mutable_list:allspark.SessionData.session_nodes)
  return &session_nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::allspark::SessionNodeData >&
SessionData::session_nodes() const {
  // @@protoc_insertion_point(field_list:allspark.SessionData.session_nodes)
  return session_nodes_;
}

// bool allow_anonymous = 5;
inline void SessionData::clear_allow_anonymous() {
  allow_anonymous_ = false;
}
inline bool SessionData::allow_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.SessionData.allow_anonymous)
  return allow_anonymous_;
}
inline void SessionData::set_allow_anonymous(bool value) {
  
  allow_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionData.allow_anonymous)
}

// -------------------------------------------------------------------

// SessionsList

// repeated .allspark.SessionData sessions = 1;
inline int SessionsList::sessions_size() const {
  return sessions_.size();
}
inline void SessionsList::clear_sessions() {
  sessions_.Clear();
}
inline const ::allspark::SessionData& SessionsList::sessions(int index) const {
  // @@protoc_insertion_point(field_get:allspark.SessionsList.sessions)
  return sessions_.Get(index);
}
inline ::allspark::SessionData* SessionsList::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.SessionsList.sessions)
  return sessions_.Mutable(index);
}
inline ::allspark::SessionData* SessionsList::add_sessions() {
  // @@protoc_insertion_point(field_add:allspark.SessionsList.sessions)
  return sessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::allspark::SessionData >*
SessionsList::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:allspark.SessionsList.sessions)
  return &sessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::allspark::SessionData >&
SessionsList::sessions() const {
  // @@protoc_insertion_point(field_list:allspark.SessionsList.sessions)
  return sessions_;
}

// int32 from = 2;
inline void SessionsList::clear_from() {
  from_ = 0;
}
inline ::google::protobuf::int32 SessionsList::from() const {
  // @@protoc_insertion_point(field_get:allspark.SessionsList.from)
  return from_;
}
inline void SessionsList::set_from(::google::protobuf::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionsList.from)
}

// int32 count = 3;
inline void SessionsList::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 SessionsList::count() const {
  // @@protoc_insertion_point(field_get:allspark.SessionsList.count)
  return count_;
}
inline void SessionsList::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:allspark.SessionsList.count)
}

// -------------------------------------------------------------------

// NodesListData

// repeated string node_id = 1;
inline int NodesListData::node_id_size() const {
  return node_id_.size();
}
inline void NodesListData::clear_node_id() {
  node_id_.Clear();
}
inline const ::std::string& NodesListData::node_id(int index) const {
  // @@protoc_insertion_point(field_get:allspark.NodesListData.node_id)
  return node_id_.Get(index);
}
inline ::std::string* NodesListData::mutable_node_id(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.NodesListData.node_id)
  return node_id_.Mutable(index);
}
inline void NodesListData::set_node_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:allspark.NodesListData.node_id)
  node_id_.Mutable(index)->assign(value);
}
inline void NodesListData::set_node_id(int index, const char* value) {
  node_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:allspark.NodesListData.node_id)
}
inline void NodesListData::set_node_id(int index, const char* value, size_t size) {
  node_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:allspark.NodesListData.node_id)
}
inline ::std::string* NodesListData::add_node_id() {
  // @@protoc_insertion_point(field_add_mutable:allspark.NodesListData.node_id)
  return node_id_.Add();
}
inline void NodesListData::add_node_id(const ::std::string& value) {
  node_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:allspark.NodesListData.node_id)
}
inline void NodesListData::add_node_id(const char* value) {
  node_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:allspark.NodesListData.node_id)
}
inline void NodesListData::add_node_id(const char* value, size_t size) {
  node_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:allspark.NodesListData.node_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodesListData::node_id() const {
  // @@protoc_insertion_point(field_list:allspark.NodesListData.node_id)
  return node_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodesListData::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable_list:allspark.NodesListData.node_id)
  return &node_id_;
}

// -------------------------------------------------------------------

// CreateSessionRequest

// bool is_anonymous = 1;
inline void CreateSessionRequest::clear_is_anonymous() {
  is_anonymous_ = false;
}
inline bool CreateSessionRequest::is_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.is_anonymous)
  return is_anonymous_;
}
inline void CreateSessionRequest::set_is_anonymous(bool value) {
  
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.is_anonymous)
}

// int32 who_can_add_session_nodes = 2;
inline void CreateSessionRequest::clear_who_can_add_session_nodes() {
  who_can_add_session_nodes_ = 0;
}
inline ::google::protobuf::int32 CreateSessionRequest::who_can_add_session_nodes() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.who_can_add_session_nodes)
  return who_can_add_session_nodes_;
}
inline void CreateSessionRequest::set_who_can_add_session_nodes(::google::protobuf::int32 value) {
  
  who_can_add_session_nodes_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.who_can_add_session_nodes)
}

// int32 notify_only_last_few_users = 3;
inline void CreateSessionRequest::clear_notify_only_last_few_users() {
  notify_only_last_few_users_ = 0;
}
inline ::google::protobuf::int32 CreateSessionRequest::notify_only_last_few_users() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.notify_only_last_few_users)
  return notify_only_last_few_users_;
}
inline void CreateSessionRequest::set_notify_only_last_few_users(::google::protobuf::int32 value) {
  
  notify_only_last_few_users_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.notify_only_last_few_users)
}

// int32 session_type = 4;
inline void CreateSessionRequest::clear_session_type() {
  session_type_ = 0;
}
inline ::google::protobuf::int32 CreateSessionRequest::session_type() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.session_type)
  return session_type_;
}
inline void CreateSessionRequest::set_session_type(::google::protobuf::int32 value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.session_type)
}

// string session_game_master_node_id = 5;
inline void CreateSessionRequest::clear_session_game_master_node_id() {
  session_game_master_node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSessionRequest::session_game_master_node_id() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.session_game_master_node_id)
  return session_game_master_node_id_.Get();
}
inline void CreateSessionRequest::set_session_game_master_node_id(const ::std::string& value) {
  
  session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.session_game_master_node_id)
}
inline void CreateSessionRequest::set_session_game_master_node_id(const char* value) {
  
  session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.CreateSessionRequest.session_game_master_node_id)
}
inline void CreateSessionRequest::set_session_game_master_node_id(const char* value,
    size_t size) {
  
  session_game_master_node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.CreateSessionRequest.session_game_master_node_id)
}
inline ::std::string* CreateSessionRequest::mutable_session_game_master_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.CreateSessionRequest.session_game_master_node_id)
  return session_game_master_node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSessionRequest::release_session_game_master_node_id() {
  // @@protoc_insertion_point(field_release:allspark.CreateSessionRequest.session_game_master_node_id)
  
  return session_game_master_node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSessionRequest::unsafe_arena_release_session_game_master_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.CreateSessionRequest.session_game_master_node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_game_master_node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSessionRequest::set_allocated_session_game_master_node_id(::std::string* session_game_master_node_id) {
  if (session_game_master_node_id != NULL) {
    
  } else {
    
  }
  session_game_master_node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_game_master_node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.CreateSessionRequest.session_game_master_node_id)
}
inline void CreateSessionRequest::unsafe_arena_set_allocated_session_game_master_node_id(
    ::std::string* session_game_master_node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_game_master_node_id != NULL) {
    
  } else {
    
  }
  session_game_master_node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_game_master_node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.CreateSessionRequest.session_game_master_node_id)
}

// string session_description = 6;
inline void CreateSessionRequest::clear_session_description() {
  session_description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSessionRequest::session_description() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.session_description)
  return session_description_.Get();
}
inline void CreateSessionRequest::set_session_description(const ::std::string& value) {
  
  session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.session_description)
}
inline void CreateSessionRequest::set_session_description(const char* value) {
  
  session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.CreateSessionRequest.session_description)
}
inline void CreateSessionRequest::set_session_description(const char* value,
    size_t size) {
  
  session_description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.CreateSessionRequest.session_description)
}
inline ::std::string* CreateSessionRequest::mutable_session_description() {
  
  // @@protoc_insertion_point(field_mutable:allspark.CreateSessionRequest.session_description)
  return session_description_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSessionRequest::release_session_description() {
  // @@protoc_insertion_point(field_release:allspark.CreateSessionRequest.session_description)
  
  return session_description_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSessionRequest::unsafe_arena_release_session_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.CreateSessionRequest.session_description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_description_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSessionRequest::set_allocated_session_description(::std::string* session_description) {
  if (session_description != NULL) {
    
  } else {
    
  }
  session_description_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.CreateSessionRequest.session_description)
}
inline void CreateSessionRequest::unsafe_arena_set_allocated_session_description(
    ::std::string* session_description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_description != NULL) {
    
  } else {
    
  }
  session_description_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.CreateSessionRequest.session_description)
}

// bool allow_anonymous = 7;
inline void CreateSessionRequest::clear_allow_anonymous() {
  allow_anonymous_ = false;
}
inline bool CreateSessionRequest::allow_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.CreateSessionRequest.allow_anonymous)
  return allow_anonymous_;
}
inline void CreateSessionRequest::set_allow_anonymous(bool value) {
  
  allow_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.CreateSessionRequest.allow_anonymous)
}

// -------------------------------------------------------------------

// JoinSessionRequest

// bool is_anonymous = 1;
inline void JoinSessionRequest::clear_is_anonymous() {
  is_anonymous_ = false;
}
inline bool JoinSessionRequest::is_anonymous() const {
  // @@protoc_insertion_point(field_get:allspark.JoinSessionRequest.is_anonymous)
  return is_anonymous_;
}
inline void JoinSessionRequest::set_is_anonymous(bool value) {
  
  is_anonymous_ = value;
  // @@protoc_insertion_point(field_set:allspark.JoinSessionRequest.is_anonymous)
}

// string session_id = 2;
inline void JoinSessionRequest::clear_session_id() {
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:allspark.JoinSessionRequest.session_id)
  return session_id_.Get();
}
inline void JoinSessionRequest::set_session_id(const ::std::string& value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.JoinSessionRequest.session_id)
}
inline void JoinSessionRequest::set_session_id(const char* value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.JoinSessionRequest.session_id)
}
inline void JoinSessionRequest::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.JoinSessionRequest.session_id)
}
inline ::std::string* JoinSessionRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.JoinSessionRequest.session_id)
  return session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:allspark.JoinSessionRequest.session_id)
  
  return session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinSessionRequest::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.JoinSessionRequest.session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinSessionRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.JoinSessionRequest.session_id)
}
inline void JoinSessionRequest::unsafe_arena_set_allocated_session_id(
    ::std::string* session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.JoinSessionRequest.session_id)
}

// string node_id = 3;
inline void JoinSessionRequest::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinSessionRequest::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.JoinSessionRequest.node_id)
  return node_id_.Get();
}
inline void JoinSessionRequest::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.JoinSessionRequest.node_id)
}
inline void JoinSessionRequest::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.JoinSessionRequest.node_id)
}
inline void JoinSessionRequest::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.JoinSessionRequest.node_id)
}
inline ::std::string* JoinSessionRequest::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.JoinSessionRequest.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinSessionRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.JoinSessionRequest.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinSessionRequest::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.JoinSessionRequest.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinSessionRequest::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.JoinSessionRequest.node_id)
}
inline void JoinSessionRequest::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.JoinSessionRequest.node_id)
}

// -------------------------------------------------------------------

// GetInboxMessagesRequest

// string session_id = 1;
inline void GetInboxMessagesRequest::clear_session_id() {
  session_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetInboxMessagesRequest::session_id() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.session_id)
  return session_id_.Get();
}
inline void GetInboxMessagesRequest::set_session_id(const ::std::string& value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.session_id)
}
inline void GetInboxMessagesRequest::set_session_id(const char* value) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.GetInboxMessagesRequest.session_id)
}
inline void GetInboxMessagesRequest::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.GetInboxMessagesRequest.session_id)
}
inline ::std::string* GetInboxMessagesRequest::mutable_session_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.GetInboxMessagesRequest.session_id)
  return session_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetInboxMessagesRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:allspark.GetInboxMessagesRequest.session_id)
  
  return session_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetInboxMessagesRequest::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.GetInboxMessagesRequest.session_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetInboxMessagesRequest::set_allocated_session_id(::std::string* session_id) {
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.GetInboxMessagesRequest.session_id)
}
inline void GetInboxMessagesRequest::unsafe_arena_set_allocated_session_id(
    ::std::string* session_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_id != NULL) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.GetInboxMessagesRequest.session_id)
}

// string node_id = 6;
inline void GetInboxMessagesRequest::clear_node_id() {
  node_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetInboxMessagesRequest::node_id() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.node_id)
  return node_id_.Get();
}
inline void GetInboxMessagesRequest::set_node_id(const ::std::string& value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.node_id)
}
inline void GetInboxMessagesRequest::set_node_id(const char* value) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.GetInboxMessagesRequest.node_id)
}
inline void GetInboxMessagesRequest::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.GetInboxMessagesRequest.node_id)
}
inline ::std::string* GetInboxMessagesRequest::mutable_node_id() {
  
  // @@protoc_insertion_point(field_mutable:allspark.GetInboxMessagesRequest.node_id)
  return node_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetInboxMessagesRequest::release_node_id() {
  // @@protoc_insertion_point(field_release:allspark.GetInboxMessagesRequest.node_id)
  
  return node_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetInboxMessagesRequest::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.GetInboxMessagesRequest.node_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetInboxMessagesRequest::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.GetInboxMessagesRequest.node_id)
}
inline void GetInboxMessagesRequest::unsafe_arena_set_allocated_node_id(
    ::std::string* node_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_id != NULL) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.GetInboxMessagesRequest.node_id)
}

// int32 from_seq = 2;
inline void GetInboxMessagesRequest::clear_from_seq() {
  from_seq_ = 0;
}
inline ::google::protobuf::int32 GetInboxMessagesRequest::from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.from_seq)
  return from_seq_;
}
inline void GetInboxMessagesRequest::set_from_seq(::google::protobuf::int32 value) {
  
  from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.from_seq)
}

// int32 to_seq = 3;
inline void GetInboxMessagesRequest::clear_to_seq() {
  to_seq_ = 0;
}
inline ::google::protobuf::int32 GetInboxMessagesRequest::to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.to_seq)
  return to_seq_;
}
inline void GetInboxMessagesRequest::set_to_seq(::google::protobuf::int32 value) {
  
  to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.to_seq)
}

// int64 from_timestamp = 4;
inline void GetInboxMessagesRequest::clear_from_timestamp() {
  from_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetInboxMessagesRequest::from_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.from_timestamp)
  return from_timestamp_;
}
inline void GetInboxMessagesRequest::set_from_timestamp(::google::protobuf::int64 value) {
  
  from_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.from_timestamp)
}

// int64 to_timestamp = 5;
inline void GetInboxMessagesRequest::clear_to_timestamp() {
  to_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetInboxMessagesRequest::to_timestamp() const {
  // @@protoc_insertion_point(field_get:allspark.GetInboxMessagesRequest.to_timestamp)
  return to_timestamp_;
}
inline void GetInboxMessagesRequest::set_to_timestamp(::google::protobuf::int64 value) {
  
  to_timestamp_ = value;
  // @@protoc_insertion_point(field_set:allspark.GetInboxMessagesRequest.to_timestamp)
}

// -------------------------------------------------------------------

// InboxMessagesResponse

// repeated .allspark.InboxMessage inbox_messages = 1;
inline int InboxMessagesResponse::inbox_messages_size() const {
  return inbox_messages_.size();
}
inline void InboxMessagesResponse::clear_inbox_messages() {
  inbox_messages_.Clear();
}
inline const ::allspark::InboxMessage& InboxMessagesResponse::inbox_messages(int index) const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_.Get(index);
}
inline ::allspark::InboxMessage* InboxMessagesResponse::mutable_inbox_messages(int index) {
  // @@protoc_insertion_point(field_mutable:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_.Mutable(index);
}
inline ::allspark::InboxMessage* InboxMessagesResponse::add_inbox_messages() {
  // @@protoc_insertion_point(field_add:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >*
InboxMessagesResponse::mutable_inbox_messages() {
  // @@protoc_insertion_point(field_mutable_list:allspark.InboxMessagesResponse.inbox_messages)
  return &inbox_messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::allspark::InboxMessage >&
InboxMessagesResponse::inbox_messages() const {
  // @@protoc_insertion_point(field_list:allspark.InboxMessagesResponse.inbox_messages)
  return inbox_messages_;
}

// int64 from_seq = 2;
inline void InboxMessagesResponse::clear_from_seq() {
  from_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InboxMessagesResponse::from_seq() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.from_seq)
  return from_seq_;
}
inline void InboxMessagesResponse::set_from_seq(::google::protobuf::int64 value) {
  
  from_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessagesResponse.from_seq)
}

// int64 to_seq = 3;
inline void InboxMessagesResponse::clear_to_seq() {
  to_seq_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InboxMessagesResponse::to_seq() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.to_seq)
  return to_seq_;
}
inline void InboxMessagesResponse::set_to_seq(::google::protobuf::int64 value) {
  
  to_seq_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessagesResponse.to_seq)
}

// bool more = 4;
inline void InboxMessagesResponse::clear_more() {
  more_ = false;
}
inline bool InboxMessagesResponse::more() const {
  // @@protoc_insertion_point(field_get:allspark.InboxMessagesResponse.more)
  return more_;
}
inline void InboxMessagesResponse::set_more(bool value) {
  
  more_ = value;
  // @@protoc_insertion_point(field_set:allspark.InboxMessagesResponse.more)
}

// -------------------------------------------------------------------

// BooleanData

// bool value = 1;
inline void BooleanData::clear_value() {
  value_ = false;
}
inline bool BooleanData::value() const {
  // @@protoc_insertion_point(field_get:allspark.BooleanData.value)
  return value_;
}
inline void BooleanData::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:allspark.BooleanData.value)
}

// -------------------------------------------------------------------

// StringData

// string value = 1;
inline void StringData::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StringData::value() const {
  // @@protoc_insertion_point(field_get:allspark.StringData.value)
  return value_.Get();
}
inline void StringData::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:allspark.StringData.value)
}
inline void StringData::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:allspark.StringData.value)
}
inline void StringData::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:allspark.StringData.value)
}
inline ::std::string* StringData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:allspark.StringData.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StringData::release_value() {
  // @@protoc_insertion_point(field_release:allspark.StringData.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StringData::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:allspark.StringData.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StringData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:allspark.StringData.value)
}
inline void StringData::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:allspark.StringData.value)
}

// -------------------------------------------------------------------

// EmptyData

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace allspark

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_5ftransfers_2eproto__INCLUDED
